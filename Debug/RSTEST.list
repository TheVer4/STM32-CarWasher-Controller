
RSTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006174  08006174  00020468  2**0
                  CONTENTS
  4 .ARM          00000008  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800617c  0800617c  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000468  20000000  08006184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020468  2**0
                  CONTENTS
 10 .bss          000001f0  20000468  20000468  00020468  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000658  20000658  00020468  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011156  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002327  00000000  00000000  000315ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  00033918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d4c  00000000  00000000  00035750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bcb  00000000  00000000  0005749c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce21d  00000000  00000000  00069067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137284  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004710  00000000  00000000  001372d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e6c 	.word	0x08005e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	08005e6c 	.word	0x08005e6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b092      	sub	sp, #72	; 0x48
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f001 fe73 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8e3 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f9fb 	bl	80009ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f9cd 	bl	8000954 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005ba:	f000 f97d 	bl	80008b8 <MX_TIM4_Init>
  MX_SPI2_Init();
 80005be:	f000 f945 	bl	800084c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  char SERIAL_MESSAGE[] = "RDY00000000000000";
 80005c2:	4b5b      	ldr	r3, [pc, #364]	; (8000730 <main+0x18c>)
 80005c4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	682b      	ldr	r3, [r5, #0]
 80005d0:	8023      	strh	r3, [r4, #0]
  char MATRIX_MESSAGE[40] = " 0:00 ";
 80005d2:	4a58      	ldr	r2, [pc, #352]	; (8000734 <main+0x190>)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005da:	6018      	str	r0, [r3, #0]
 80005dc:	3304      	adds	r3, #4
 80005de:	8019      	strh	r1, [r3, #0]
 80005e0:	3302      	adds	r3, #2
 80005e2:	0c0a      	lsrs	r2, r1, #16
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	f107 030b 	add.w	r3, r7, #11
 80005ea:	2221      	movs	r2, #33	; 0x21
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fefc 	bl	80053ec <memset>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2101      	movs	r1, #1
 80005f8:	484f      	ldr	r0, [pc, #316]	; (8000738 <main+0x194>)
 80005fa:	f002 fa21 	bl	8002a40 <HAL_GPIO_WritePin>

  HAL_UART_Transmit(&huart1, (uint8_t*)SERIAL_MESSAGE, strlen(SERIAL_MESSAGE), 1000);
 80005fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fdee 	bl	80001e4 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	4849      	ldr	r0, [pc, #292]	; (800073c <main+0x198>)
 8000616:	f003 fe77 	bl	8004308 <HAL_UART_Transmit>
  HAL_UART_Receive_IT (&huart1, UART1_rxBuffer, UART_BUFFER_SIZE);
 800061a:	2201      	movs	r2, #1
 800061c:	4948      	ldr	r1, [pc, #288]	; (8000740 <main+0x19c>)
 800061e:	4847      	ldr	r0, [pc, #284]	; (800073c <main+0x198>)
 8000620:	f003 ff04 	bl	800442c <HAL_UART_Receive_IT>

  MFRC522_Init();
 8000624:	f001 fbf2 	bl	8001e0c <MFRC522_Init>
  max_init(0x1);
 8000628:	2001      	movs	r0, #1
 800062a:	f001 f98f 	bl	800194c <max_init>

  // Initialize Relays
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	210f      	movs	r1, #15
 8000632:	4844      	ldr	r0, [pc, #272]	; (8000744 <main+0x1a0>)
 8000634:	f002 fa04 	bl	8002a40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800063e:	4842      	ldr	r0, [pc, #264]	; (8000748 <main+0x1a4>)
 8000640:	f002 f9fe 	bl	8002a40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4840      	ldr	r0, [pc, #256]	; (800074c <main+0x1a8>)
 800064c:	f002 f9f8 	bl	8002a40 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t even = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


  while (1)
  {

	  InteractWithRC522();
 8000656:	f000 fec1 	bl	80013dc <InteractWithRC522>

	  if(sn[0] == 0 && sn[1] == 0 && sn[2] == 0 && sn[3] == 0)
 800065a:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <main+0x1ac>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10f      	bne.n	8000682 <main+0xde>
 8000662:	4b3b      	ldr	r3, [pc, #236]	; (8000750 <main+0x1ac>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10b      	bne.n	8000682 <main+0xde>
 800066a:	4b39      	ldr	r3, [pc, #228]	; (8000750 <main+0x1ac>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d107      	bne.n	8000682 <main+0xde>
 8000672:	4b37      	ldr	r3, [pc, #220]	; (8000750 <main+0x1ac>)
 8000674:	78db      	ldrb	r3, [r3, #3]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <main+0xde>
		  cardPassed = 0;
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <main+0x1b0>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e002      	b.n	8000688 <main+0xe4>
	  else
		  cardPassed = 1;
 8000682:	4b34      	ldr	r3, [pc, #208]	; (8000754 <main+0x1b0>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(2 * 1000);
 8000688:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068c:	f001 fe74 	bl	8002378 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8000690:	2103      	movs	r1, #3
 8000692:	4829      	ldr	r0, [pc, #164]	; (8000738 <main+0x194>)
 8000694:	f002 f9ed 	bl	8002a72 <HAL_GPIO_TogglePin>
      if(cardPassed) {
 8000698:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <main+0x1b0>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d02d      	beq.n	80006fc <main+0x158>
    	  if(even++ % 2 == 0)
 80006a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d11b      	bne.n	80006ec <main+0x148>
    		  snprintf(MATRIX_MESSAGE, sizeof(MATRIX_MESSAGE), " %d:%02d ", userTime / 60, userTime % 60);
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <main+0x1b4>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	4a28      	ldr	r2, [pc, #160]	; (800075c <main+0x1b8>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	461c      	mov	r4, r3
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <main+0x1b4>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <main+0x1b8>)
 80006ca:	fba3 1302 	umull	r1, r3, r3, r2
 80006ce:	0959      	lsrs	r1, r3, #5
 80006d0:	460b      	mov	r3, r1
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	b29b      	uxth	r3, r3
 80006dc:	1d38      	adds	r0, r7, #4
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	4623      	mov	r3, r4
 80006e2:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <main+0x1bc>)
 80006e4:	2128      	movs	r1, #40	; 0x28
 80006e6:	f004 ff79 	bl	80055dc <sniprintf>
 80006ea:	e014      	b.n	8000716 <main+0x172>
		  else
			  snprintf(MATRIX_MESSAGE, sizeof(MATRIX_MESSAGE), " %02d P ", userBalance); //userBalance
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <main+0x1c0>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	1d38      	adds	r0, r7, #4
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <main+0x1c4>)
 80006f4:	2128      	movs	r1, #40	; 0x28
 80006f6:	f004 ff71 	bl	80055dc <sniprintf>
 80006fa:	e00c      	b.n	8000716 <main+0x172>

//    	  scroll_string((uint8_t*)MATRIX_MESSAGE, 100, left);
      } else {
    	  strcpy(MATRIX_MESSAGE, "BCTABbTE KAPTY      WELCOME!        ");
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <main+0x1c8>)
 8000700:	461c      	mov	r4, r3
 8000702:	4615      	mov	r5, r2
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000710:	6020      	str	r0, [r4, #0]
 8000712:	3404      	adds	r4, #4
 8000714:	7021      	strb	r1, [r4, #0]
      }

      scroll_string((uint8_t*)MATRIX_MESSAGE, 25, left);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	224c      	movs	r2, #76	; 0x4c
 800071a:	2119      	movs	r1, #25
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f85d 	bl	80017dc <scroll_string>
      lastPressedButton = 0;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <main+0x1cc>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
      pressCount = 0;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <main+0x1d0>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	  InteractWithRC522();
 800072e:	e792      	b.n	8000656 <main+0xb2>
 8000730:	08005ec4 	.word	0x08005ec4
 8000734:	08005ed8 	.word	0x08005ed8
 8000738:	40021000 	.word	0x40021000
 800073c:	20000524 	.word	0x20000524
 8000740:	20000568 	.word	0x20000568
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40020800 	.word	0x40020800
 800074c:	40020000 	.word	0x40020000
 8000750:	20000588 	.word	0x20000588
 8000754:	20000582 	.word	0x20000582
 8000758:	20000580 	.word	0x20000580
 800075c:	88888889 	.word	0x88888889
 8000760:	08005e84 	.word	0x08005e84
 8000764:	2000057e 	.word	0x2000057e
 8000768:	08005e90 	.word	0x08005e90
 800076c:	08005e9c 	.word	0x08005e9c
 8000770:	20000584 	.word	0x20000584
 8000774:	20000585 	.word	0x20000585

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fe30 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <SystemClock_Config+0xd0>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ec:	23a8      	movs	r3, #168	; 0xa8
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f96b 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f000 fe7a 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2105      	movs	r1, #5
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fbcc 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000836:	f000 fe63 	bl	8001500 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	; 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_SPI2_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI2_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000880:	2210      	movs	r2, #16
 8000882:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI2_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI2_Init+0x64>)
 800089e:	f002 fdb3 	bl	8003408 <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 fe2a 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000484 	.word	0x20000484
 80008b4:	40003800 	.word	0x40003800

080008b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM4_Init+0x94>)
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <MX_TIM4_Init+0x98>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_TIM4_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM4_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM4_Init+0x94>)
 80008e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_TIM4_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM4_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <MX_TIM4_Init+0x94>)
 80008fc:	f003 f87a 	bl	80039f4 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 fdfb 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_TIM4_Init+0x94>)
 8000918:	f003 f9c3 	bl	8003ca2 <HAL_TIM_ConfigClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 fded 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_TIM4_Init+0x94>)
 8000934:	f003 fbe8 	bl	8004108 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800093e:	f000 fddf 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200004dc 	.word	0x200004dc
 8000950:	40000800 	.word	0x40000800

08000954 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_USART1_UART_Init+0x54>)
 800095c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 8000990:	f003 fc4a 	bl	8004228 <HAL_MultiProcessor_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800099a:	f000 fdb1 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000524 	.word	0x20000524
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	4b6c      	ldr	r3, [pc, #432]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a6b      	ldr	r2, [pc, #428]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b69      	ldr	r3, [pc, #420]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	4b65      	ldr	r3, [pc, #404]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a64      	ldr	r2, [pc, #400]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b5e      	ldr	r3, [pc, #376]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a5d      	ldr	r2, [pc, #372]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b5b      	ldr	r3, [pc, #364]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b57      	ldr	r3, [pc, #348]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a56      	ldr	r2, [pc, #344]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b54      	ldr	r3, [pc, #336]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b50      	ldr	r3, [pc, #320]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a4f      	ldr	r2, [pc, #316]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b49      	ldr	r3, [pc, #292]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a48      	ldr	r2, [pc, #288]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b46      	ldr	r3, [pc, #280]	; (8000b78 <MX_GPIO_Init+0x1cc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Marquee_CS_Pin|Marquee_CLS_Pin|Marquee_DIN_Pin|Relay_8_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f248 01b0 	movw	r1, #32944	; 0x80b0
 8000a70:	4842      	ldr	r0, [pc, #264]	; (8000b7c <MX_GPIO_Init+0x1d0>)
 8000a72:	f001 ffe5 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4840      	ldr	r0, [pc, #256]	; (8000b80 <MX_GPIO_Init+0x1d4>)
 8000a7e:	f001 ffdf 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Relay_4_Pin|Relay_7_Pin|Relay_3_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000a88:	483e      	ldr	r0, [pc, #248]	; (8000b84 <MX_GPIO_Init+0x1d8>)
 8000a8a:	f001 ffd9 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Relay_6_Pin|Relay_2_Pin|Relay_5_Pin|Relay_1_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	483d      	ldr	r0, [pc, #244]	; (8000b88 <MX_GPIO_Init+0x1dc>)
 8000a94:	f001 ffd4 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_Tim_Pin|LED_Balance_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2103      	movs	r1, #3
 8000a9c:	483b      	ldr	r0, [pc, #236]	; (8000b8c <MX_GPIO_Init+0x1e0>)
 8000a9e:	f001 ffcf 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Marquee_CS_Pin Marquee_CLS_Pin Marquee_DIN_Pin Relay_8_Pin */
  GPIO_InitStruct.Pin = Marquee_CS_Pin|Marquee_CLS_Pin|Marquee_DIN_Pin|Relay_8_Pin;
 8000aa2:	f248 03b0 	movw	r3, #32944	; 0x80b0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4830      	ldr	r0, [pc, #192]	; (8000b7c <MX_GPIO_Init+0x1d0>)
 8000abc:	f001 fe24 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_5_Pin Button_2_Pin Button_6_Pin
                           Button_3_Pin Button_7_Pin Button_4_Pin Button_8_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_5_Pin|Button_2_Pin|Button_6_Pin
 8000ac0:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8000ac4:	61fb      	str	r3, [r7, #28]
                          |Button_3_Pin|Button_7_Pin|Button_4_Pin|Button_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	482d      	ldr	r0, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x1e0>)
 8000ad8:	f001 fe16 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4822      	ldr	r0, [pc, #136]	; (8000b80 <MX_GPIO_Init+0x1d4>)
 8000af6:	f001 fe07 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_4_Pin Relay_7_Pin Relay_3_Pin */
  GPIO_InitStruct.Pin = Relay_4_Pin|Relay_7_Pin|Relay_3_Pin;
 8000afa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	481c      	ldr	r0, [pc, #112]	; (8000b84 <MX_GPIO_Init+0x1d8>)
 8000b14:	f001 fdf8 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_6_Pin Relay_2_Pin Relay_5_Pin Relay_1_Pin */
  GPIO_InitStruct.Pin = Relay_6_Pin|Relay_2_Pin|Relay_5_Pin|Relay_1_Pin;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <MX_GPIO_Init+0x1dc>)
 8000b30:	f001 fdea 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Tim_Pin LED_Balance_Pin */
  GPIO_InitStruct.Pin = LED_Tim_Pin|LED_Balance_Pin;
 8000b34:	2303      	movs	r3, #3
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <MX_GPIO_Init+0x1e0>)
 8000b4c:	f001 fddc 	bl	8002708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2017      	movs	r0, #23
 8000b56:	f001 fd0e 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b5a:	2017      	movs	r0, #23
 8000b5c:	f001 fd27 	bl	80025ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2028      	movs	r0, #40	; 0x28
 8000b66:	f001 fd06 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b6a:	2028      	movs	r0, #40	; 0x28
 8000b6c:	f001 fd1f 	bl	80025ae <HAL_NVIC_EnableIRQ>

}
 8000b70:	bf00      	nop
 8000b72:	3730      	adds	r7, #48	; 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	uint8_t DEBUG_MODE = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
    if(DEBUG_MODE) HAL_UART_Transmit(&huart1, UART1_rxBuffer, UART_BUFFER_SIZE, 100); //DEBUG LINE DELETE IN PROD
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <HAL_UART_RxCpltCallback+0x1e>
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4928      	ldr	r1, [pc, #160]	; (8000c48 <HAL_UART_RxCpltCallback+0xb8>)
 8000ba8:	4828      	ldr	r0, [pc, #160]	; (8000c4c <HAL_UART_RxCpltCallback+0xbc>)
 8000baa:	f003 fbad 	bl	8004308 <HAL_UART_Transmit>


    if(UART1_rxBuffer[0] == 64) { //Service Mode, if sent @ symbol, the buffer will be cleared
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <HAL_UART_RxCpltCallback+0xb8>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b40      	cmp	r3, #64	; 0x40
 8000bb4:	d113      	bne.n	8000bde <HAL_UART_RxCpltCallback+0x4e>
    	for (int i=0; i<UART_MESSAGE_SIZE; i++) UART1_rxMessageBuffer[i] = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e007      	b.n	8000bcc <HAL_UART_RxCpltCallback+0x3c>
 8000bbc:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <HAL_UART_RxCpltCallback+0xc0>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b10      	cmp	r3, #16
 8000bd0:	ddf4      	ble.n	8000bbc <HAL_UART_RxCpltCallback+0x2c>
    	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, UART_BUFFER_SIZE);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	491c      	ldr	r1, [pc, #112]	; (8000c48 <HAL_UART_RxCpltCallback+0xb8>)
 8000bd6:	481d      	ldr	r0, [pc, #116]	; (8000c4c <HAL_UART_RxCpltCallback+0xbc>)
 8000bd8:	f003 fc28 	bl	800442c <HAL_UART_Receive_IT>
    	return;
 8000bdc:	e031      	b.n	8000c42 <HAL_UART_RxCpltCallback+0xb2>
    }


    if(strlen(UART1_rxMessageBuffer) == 0) {
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_UART_RxCpltCallback+0xc0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <HAL_UART_RxCpltCallback+0x60>
    	strcpy(UART1_rxMessageBuffer, UART1_rxBuffer);
 8000be6:	4918      	ldr	r1, [pc, #96]	; (8000c48 <HAL_UART_RxCpltCallback+0xb8>)
 8000be8:	4819      	ldr	r0, [pc, #100]	; (8000c50 <HAL_UART_RxCpltCallback+0xc0>)
 8000bea:	f004 fd5a 	bl	80056a2 <strcpy>
 8000bee:	e003      	b.n	8000bf8 <HAL_UART_RxCpltCallback+0x68>
    } else {
    	strcat(UART1_rxMessageBuffer, UART1_rxBuffer);
 8000bf0:	4915      	ldr	r1, [pc, #84]	; (8000c48 <HAL_UART_RxCpltCallback+0xb8>)
 8000bf2:	4817      	ldr	r0, [pc, #92]	; (8000c50 <HAL_UART_RxCpltCallback+0xc0>)
 8000bf4:	f004 fd46 	bl	8005684 <strcat>
    }

    if(strlen(UART1_rxMessageBuffer) == UART_MESSAGE_SIZE) {
 8000bf8:	4815      	ldr	r0, [pc, #84]	; (8000c50 <HAL_UART_RxCpltCallback+0xc0>)
 8000bfa:	f7ff faf3 	bl	80001e4 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b11      	cmp	r3, #17
 8000c02:	d119      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0xa8>
    	if(DEBUG_MODE) 	HAL_UART_Transmit(&huart1, "\r\n", 2, 100); //DEBUG LINE DELETE IN PROD
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <HAL_UART_RxCpltCallback+0x86>
 8000c0a:	2364      	movs	r3, #100	; 0x64
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4911      	ldr	r1, [pc, #68]	; (8000c54 <HAL_UART_RxCpltCallback+0xc4>)
 8000c10:	480e      	ldr	r0, [pc, #56]	; (8000c4c <HAL_UART_RxCpltCallback+0xbc>)
 8000c12:	f003 fb79 	bl	8004308 <HAL_UART_Transmit>

    	ProcessUARTCommand(UART1_rxMessageBuffer);
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <HAL_UART_RxCpltCallback+0xc0>)
 8000c18:	f000 f81e 	bl	8000c58 <ProcessUARTCommand>

		for (int i=0; i<UART_MESSAGE_SIZE; i++) UART1_rxMessageBuffer[i] = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	e007      	b.n	8000c32 <HAL_UART_RxCpltCallback+0xa2>
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_UART_RxCpltCallback+0xc0>)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4413      	add	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	2b10      	cmp	r3, #16
 8000c36:	ddf4      	ble.n	8000c22 <HAL_UART_RxCpltCallback+0x92>
    }

    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, UART_BUFFER_SIZE);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4903      	ldr	r1, [pc, #12]	; (8000c48 <HAL_UART_RxCpltCallback+0xb8>)
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <HAL_UART_RxCpltCallback+0xbc>)
 8000c3e:	f003 fbf5 	bl	800442c <HAL_UART_Receive_IT>
}
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000568 	.word	0x20000568
 8000c4c:	20000524 	.word	0x20000524
 8000c50:	2000056c 	.word	0x2000056c
 8000c54:	08005f00 	.word	0x08005f00

08000c58 <ProcessUARTCommand>:

void ProcessUARTCommand(char * command) {
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b09e      	sub	sp, #120	; 0x78
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	6078      	str	r0, [r7, #4]
	char * cmd[3] = {0};
 8000c60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
	char * arg[14] = {0};
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	2238      	movs	r2, #56	; 0x38
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 fbb9 	bl	80053ec <memset>
	char response[17] = {0};
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	731a      	strb	r2, [r3, #12]
	memcpy(cmd, &command[0], 3);
 8000c8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c90:	2203      	movs	r2, #3
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 fb9b 	bl	80053d0 <memcpy>
	memcpy(arg, &command[3], 14);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	1cd9      	adds	r1, r3, #3
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	220e      	movs	r2, #14
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 fb93 	bl	80053d0 <memcpy>
//
//	HAL_UART_Transmit(&huart1, "Argument: ", 10, 100);
//	HAL_UART_Transmit(&huart1, arg, 14, 100);
//	HAL_UART_Transmit(&huart1, "\r\n", 2, 100);

	if(strcmp(cmd, "GYN") == 0) { //Give Your Name
 8000caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cae:	499c      	ldr	r1, [pc, #624]	; (8000f20 <ProcessUARTCommand+0x2c8>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fa8d 	bl	80001d0 <strcmp>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d119      	bne.n	8000cf0 <ProcessUARTCommand+0x98>
		strcpy(response, "DUN");
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4a98      	ldr	r2, [pc, #608]	; (8000f24 <ProcessUARTCommand+0x2cc>)
 8000cc2:	601a      	str	r2, [r3, #0]
		char * uid = GetSTMuID();
 8000cc4:	f000 f960 	bl	8000f88 <GetSTMuID>
 8000cc8:	6678      	str	r0, [r7, #100]	; 0x64
		sprintf(arg, "%014s", uid);
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000cd0:	4995      	ldr	r1, [pc, #596]	; (8000f28 <ProcessUARTCommand+0x2d0>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 fcb6 	bl	8005644 <siprintf>
		free(uid);
 8000cd8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000cda:	f004 fb71 	bl	80053c0 <free>
		strcat(response, arg);
 8000cde:	f107 0220 	add.w	r2, r7, #32
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fccb 	bl	8005684 <strcat>
 8000cee:	e10b      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else if(strcmp(cmd, "GCI") == 0) { //Give Card UID
 8000cf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cf4:	498d      	ldr	r1, [pc, #564]	; (8000f2c <ProcessUARTCommand+0x2d4>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fa6a 	bl	80001d0 <strcmp>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d120      	bne.n	8000d44 <ProcessUARTCommand+0xec>
		strcpy(response, "CID");
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4a8a      	ldr	r2, [pc, #552]	; (8000f30 <ProcessUARTCommand+0x2d8>)
 8000d08:	601a      	str	r2, [r3, #0]
		sprintf(arg, "NCP%08x%02x%02x%02x", sn[0],sn[1],sn[2],sn[3]);
 8000d0a:	4b8a      	ldr	r3, [pc, #552]	; (8000f34 <ProcessUARTCommand+0x2dc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4b88      	ldr	r3, [pc, #544]	; (8000f34 <ProcessUARTCommand+0x2dc>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	461c      	mov	r4, r3
 8000d16:	4b87      	ldr	r3, [pc, #540]	; (8000f34 <ProcessUARTCommand+0x2dc>)
 8000d18:	789b      	ldrb	r3, [r3, #2]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b85      	ldr	r3, [pc, #532]	; (8000f34 <ProcessUARTCommand+0x2dc>)
 8000d1e:	78db      	ldrb	r3, [r3, #3]
 8000d20:	f107 0020 	add.w	r0, r7, #32
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	9200      	str	r2, [sp, #0]
 8000d28:	4623      	mov	r3, r4
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	4982      	ldr	r1, [pc, #520]	; (8000f38 <ProcessUARTCommand+0x2e0>)
 8000d2e:	f004 fc89 	bl	8005644 <siprintf>
		strcat(response, arg);
 8000d32:	f107 0220 	add.w	r2, r7, #32
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 fca1 	bl	8005684 <strcat>
 8000d42:	e0e1      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else if(strcmp(cmd, "GRS") == 0) { // Get Relay Statuses
 8000d44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d48:	497c      	ldr	r1, [pc, #496]	; (8000f3c <ProcessUARTCommand+0x2e4>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fa40 	bl	80001d0 <strcmp>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <ProcessUARTCommand+0x12a>
		strcpy(response, "RES");
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4a79      	ldr	r2, [pc, #484]	; (8000f40 <ProcessUARTCommand+0x2e8>)
 8000d5c:	601a      	str	r2, [r3, #0]
		sprintf(arg, "%014X", relayStates);
 8000d5e:	4b79      	ldr	r3, [pc, #484]	; (8000f44 <ProcessUARTCommand+0x2ec>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4977      	ldr	r1, [pc, #476]	; (8000f48 <ProcessUARTCommand+0x2f0>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 fc6a 	bl	8005644 <siprintf>
		strcat(response, arg);
 8000d70:	f107 0220 	add.w	r2, r7, #32
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fc82 	bl	8005684 <strcat>
 8000d80:	e0c2      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else if(strcmp(cmd, "TRE") == 0) { // Turn Relay Enabled
 8000d82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d86:	4971      	ldr	r1, [pc, #452]	; (8000f4c <ProcessUARTCommand+0x2f4>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fa21 	bl	80001d0 <strcmp>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d11b      	bne.n	8000dcc <ProcessUARTCommand+0x174>
		strcpy(response, "REO");
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4a6d      	ldr	r2, [pc, #436]	; (8000f50 <ProcessUARTCommand+0x2f8>)
 8000d9a:	601a      	str	r2, [r3, #0]
		uint8_t state = strtol(arg, NULL, 16);
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	2210      	movs	r2, #16
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fd07 	bl	80057b8 <strtol>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		TurnRelayEnabled(state);
 8000db0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f911 	bl	8000fdc <TurnRelayEnabled>
		strcat(response, arg);
 8000dba:	f107 0220 	add.w	r2, r7, #32
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 fc5d 	bl	8005684 <strcat>
 8000dca:	e09d      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else if(strcmp(cmd, "TRD") == 0) { // Turn Relay Disabled
 8000dcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dd0:	4960      	ldr	r1, [pc, #384]	; (8000f54 <ProcessUARTCommand+0x2fc>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff f9fc 	bl	80001d0 <strcmp>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d11b      	bne.n	8000e16 <ProcessUARTCommand+0x1be>
		strcpy(response, "RDO");
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4a5d      	ldr	r2, [pc, #372]	; (8000f58 <ProcessUARTCommand+0x300>)
 8000de4:	601a      	str	r2, [r3, #0]
		uint8_t state = strtol(arg, NULL, 16);
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2210      	movs	r2, #16
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fce2 	bl	80057b8 <strtol>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		TurnRelayDisabled(state);
 8000dfa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f958 	bl	80010b4 <TurnRelayDisabled>
		strcat(response, arg);
 8000e04:	f107 0220 	add.w	r2, r7, #32
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f004 fc38 	bl	8005684 <strcat>
 8000e14:	e078      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else if(strcmp(cmd, "SRS") == 0) { // Switch Relay Status DEPRECATED
 8000e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e1a:	4950      	ldr	r1, [pc, #320]	; (8000f5c <ProcessUARTCommand+0x304>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f9d7 	bl	80001d0 <strcmp>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d112      	bne.n	8000e4e <ProcessUARTCommand+0x1f6>
		strcpy(response, "RSO");
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <ProcessUARTCommand+0x308>)
 8000e2e:	601a      	str	r2, [r3, #0]
		sprintf(arg, "000000DEADBEEF");
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	494b      	ldr	r1, [pc, #300]	; (8000f64 <ProcessUARTCommand+0x30c>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fc04 	bl	8005644 <siprintf>
		strcat(response, arg);
 8000e3c:	f107 0220 	add.w	r2, r7, #32
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fc1c 	bl	8005684 <strcat>
 8000e4c:	e05c      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else if(strcmp(cmd, "CBV") == 0) { // Change Balance Value
 8000e4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e52:	4945      	ldr	r1, [pc, #276]	; (8000f68 <ProcessUARTCommand+0x310>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9bb 	bl	80001d0 <strcmp>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d120      	bne.n	8000ea2 <ProcessUARTCommand+0x24a>
//		HAL_UART_Transmit(&huart1, "Hit CBV\r\n", 9, 100);
		strcpy(response, "VBO");
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4a41      	ldr	r2, [pc, #260]	; (8000f6c <ProcessUARTCommand+0x314>)
 8000e66:	601a      	str	r2, [r3, #0]
		uint16_t parsedArgument = strtol(arg, NULL, 16);
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fca1 	bl	80057b8 <strtol>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		userBalance = (parsedArgument <= 9999) ? parsedArgument : 9999;
 8000e7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000e80:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e84:	4293      	cmp	r3, r2
 8000e86:	bf28      	it	cs
 8000e88:	4613      	movcs	r3, r2
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <ProcessUARTCommand+0x318>)
 8000e8e:	801a      	strh	r2, [r3, #0]
		strcat(response, arg);
 8000e90:	f107 0220 	add.w	r2, r7, #32
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 fbf2 	bl	8005684 <strcat>
 8000ea0:	e032      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else if(strcmp(cmd, "CTV") == 0) { // Change Time Value
 8000ea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ea6:	4933      	ldr	r1, [pc, #204]	; (8000f74 <ProcessUARTCommand+0x31c>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff f991 	bl	80001d0 <strcmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d120      	bne.n	8000ef6 <ProcessUARTCommand+0x29e>
//		HAL_UART_Transmit(&huart1, "Hit CBV\r\n", 9, 100);
		strcpy(response, "VTO");
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <ProcessUARTCommand+0x320>)
 8000eba:	601a      	str	r2, [r3, #0]
		uint16_t parsedArgument = strtol(arg, NULL, 16);
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fc77 	bl	80057b8 <strtol>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		userTime = (parsedArgument <= 3599) ? parsedArgument : 3599;;
 8000ed0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000ed4:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	bf28      	it	cs
 8000edc:	4613      	movcs	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <ProcessUARTCommand+0x324>)
 8000ee2:	801a      	strh	r2, [r3, #0]
		strcat(response, arg);
 8000ee4:	f107 0220 	add.w	r2, r7, #32
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fbc8 	bl	8005684 <strcat>
 8000ef4:	e008      	b.n	8000f08 <ProcessUARTCommand+0x2b0>
	} else {
		strcpy(response, "00000000000000000");
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <ProcessUARTCommand+0x328>)
 8000efc:	461c      	mov	r4, r3
 8000efe:	4615      	mov	r5, r2
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	8023      	strh	r3, [r4, #0]
	}


	HAL_UART_Transmit(&huart1, response, 17, 100);
 8000f08:	f107 010c 	add.w	r1, r7, #12
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	2211      	movs	r2, #17
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <ProcessUARTCommand+0x32c>)
 8000f12:	f003 f9f9 	bl	8004308 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
	return;
 8000f16:	bf00      	nop
}
 8000f18:	3770      	adds	r7, #112	; 0x70
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	08005f04 	.word	0x08005f04
 8000f24:	004e5544 	.word	0x004e5544
 8000f28:	08005f08 	.word	0x08005f08
 8000f2c:	08005f10 	.word	0x08005f10
 8000f30:	00444943 	.word	0x00444943
 8000f34:	20000588 	.word	0x20000588
 8000f38:	08005f14 	.word	0x08005f14
 8000f3c:	08005f28 	.word	0x08005f28
 8000f40:	00534552 	.word	0x00534552
 8000f44:	20000583 	.word	0x20000583
 8000f48:	08005f2c 	.word	0x08005f2c
 8000f4c:	08005f34 	.word	0x08005f34
 8000f50:	004f4552 	.word	0x004f4552
 8000f54:	08005f38 	.word	0x08005f38
 8000f58:	004f4452 	.word	0x004f4452
 8000f5c:	08005f3c 	.word	0x08005f3c
 8000f60:	004f5352 	.word	0x004f5352
 8000f64:	08005f40 	.word	0x08005f40
 8000f68:	08005f50 	.word	0x08005f50
 8000f6c:	004f4256 	.word	0x004f4256
 8000f70:	2000057e 	.word	0x2000057e
 8000f74:	08005f54 	.word	0x08005f54
 8000f78:	004f5456 	.word	0x004f5456
 8000f7c:	20000580 	.word	0x20000580
 8000f80:	08005f58 	.word	0x08005f58
 8000f84:	20000524 	.word	0x20000524

08000f88 <GetSTMuID>:

char * GetSTMuID(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
	uint16_t *idBase0 = (uint16_t*)(UID_BASE);
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <GetSTMuID+0x44>)
 8000f90:	60fb      	str	r3, [r7, #12]
	uint16_t *idBase1 = (uint16_t*)(UID_BASE + 0x02);
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <GetSTMuID+0x48>)
 8000f94:	60bb      	str	r3, [r7, #8]
//	uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04); // sorry, not enough place in proto :(
	uint32_t *idBase3 = (uint32_t*)(UID_BASE + 0x08);
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <GetSTMuID+0x4c>)
 8000f98:	607b      	str	r3, [r7, #4]
	char * result = malloc(sizeof(char)*16);
 8000f9a:	2010      	movs	r0, #16
 8000f9c:	f004 fa08 	bl	80053b0 <malloc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	603b      	str	r3, [r7, #0]
	sprintf(result, "%x%x%x", *idBase0, *idBase1, *idBase3);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <GetSTMuID+0x50>)
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f004 fb42 	bl	8005644 <siprintf>
	return result;
 8000fc0:	683b      	ldr	r3, [r7, #0]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	1fff7a10 	.word	0x1fff7a10
 8000fd0:	1fff7a12 	.word	0x1fff7a12
 8000fd4:	1fff7a18 	.word	0x1fff7a18
 8000fd8:	08005f6c 	.word	0x08005f6c

08000fdc <TurnRelayEnabled>:

void TurnRelayEnabled(uint8_t relayNumber) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	if((relayNumber & 1) == 1)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <TurnRelayEnabled+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // Relay 1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	482b      	ldr	r0, [pc, #172]	; (80010a4 <TurnRelayEnabled+0xc8>)
 8000ff6:	f001 fd23 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 2) == 2)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <TurnRelayEnabled+0x32>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET); // Relay 2
 8001004:	2200      	movs	r2, #0
 8001006:	2102      	movs	r1, #2
 8001008:	4826      	ldr	r0, [pc, #152]	; (80010a4 <TurnRelayEnabled+0xc8>)
 800100a:	f001 fd19 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 4) == 4)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <TurnRelayEnabled+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); // Relay 3
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101e:	4822      	ldr	r0, [pc, #136]	; (80010a8 <TurnRelayEnabled+0xcc>)
 8001020:	f001 fd0e 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 8) == 8)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <TurnRelayEnabled+0x5e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Relay 4
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001034:	481c      	ldr	r0, [pc, #112]	; (80010a8 <TurnRelayEnabled+0xcc>)
 8001036:	f001 fd03 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 16) == 16)
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <TurnRelayEnabled+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); // Relay 5
 8001044:	2200      	movs	r2, #0
 8001046:	2104      	movs	r1, #4
 8001048:	4816      	ldr	r0, [pc, #88]	; (80010a4 <TurnRelayEnabled+0xc8>)
 800104a:	f001 fcf9 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 32) == 32)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 0320 	and.w	r3, r3, #32
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <TurnRelayEnabled+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET); // Relay 6
 8001058:	2200      	movs	r2, #0
 800105a:	2101      	movs	r1, #1
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <TurnRelayEnabled+0xc8>)
 800105e:	f001 fcef 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 64) == 64)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <TurnRelayEnabled+0x9c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); // Relay 7
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <TurnRelayEnabled+0xcc>)
 8001074:	f001 fce4 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 128) == 128)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	da05      	bge.n	800108c <TurnRelayEnabled+0xb0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Relay 8
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001086:	4809      	ldr	r0, [pc, #36]	; (80010ac <TurnRelayEnabled+0xd0>)
 8001088:	f001 fcda 	bl	8002a40 <HAL_GPIO_WritePin>

	relayStates |= relayNumber;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <TurnRelayEnabled+0xd4>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4313      	orrs	r3, r2
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <TurnRelayEnabled+0xd4>)
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	20000583 	.word	0x20000583

080010b4 <TurnRelayDisabled>:

void TurnRelayDisabled(uint8_t relayNumber) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	if((relayNumber & 1) == 1)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <TurnRelayDisabled+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // Relay 1
 80010c8:	2201      	movs	r2, #1
 80010ca:	2108      	movs	r1, #8
 80010cc:	482c      	ldr	r0, [pc, #176]	; (8001180 <TurnRelayDisabled+0xcc>)
 80010ce:	f001 fcb7 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 2) == 2)
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <TurnRelayDisabled+0x32>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET); // Relay 2
 80010dc:	2201      	movs	r2, #1
 80010de:	2102      	movs	r1, #2
 80010e0:	4827      	ldr	r0, [pc, #156]	; (8001180 <TurnRelayDisabled+0xcc>)
 80010e2:	f001 fcad 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 4) == 4)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <TurnRelayDisabled+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); // Relay 3
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f6:	4823      	ldr	r0, [pc, #140]	; (8001184 <TurnRelayDisabled+0xd0>)
 80010f8:	f001 fca2 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 8) == 8)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <TurnRelayDisabled+0x5e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // Relay 4
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	481d      	ldr	r0, [pc, #116]	; (8001184 <TurnRelayDisabled+0xd0>)
 800110e:	f001 fc97 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 16) == 16)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <TurnRelayDisabled+0x72>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); // Relay 5
 800111c:	2201      	movs	r2, #1
 800111e:	2104      	movs	r1, #4
 8001120:	4817      	ldr	r0, [pc, #92]	; (8001180 <TurnRelayDisabled+0xcc>)
 8001122:	f001 fc8d 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 32) == 32)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 0320 	and.w	r3, r3, #32
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <TurnRelayDisabled+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET); // Relay 6
 8001130:	2201      	movs	r2, #1
 8001132:	2101      	movs	r1, #1
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <TurnRelayDisabled+0xcc>)
 8001136:	f001 fc83 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 64) == 64)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <TurnRelayDisabled+0x9c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET); // Relay 7
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <TurnRelayDisabled+0xd0>)
 800114c:	f001 fc78 	bl	8002a40 <HAL_GPIO_WritePin>
	if((relayNumber & 128) == 128)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	da05      	bge.n	8001164 <TurnRelayDisabled+0xb0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Relay 8
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <TurnRelayDisabled+0xd4>)
 8001160:	f001 fc6e 	bl	8002a40 <HAL_GPIO_WritePin>

	relayStates ^= (relayStates&relayNumber);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	43db      	mvns	r3, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <TurnRelayDisabled+0xd8>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4013      	ands	r3, r2
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <TurnRelayDisabled+0xd8>)
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40020800 	.word	0x40020800
 8001188:	40020000 	.word	0x40020000
 800118c:	20000583 	.word	0x20000583

08001190 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	if (pressCount != 1) {
 800119a:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f000 8103 	beq.w	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
		uint8_t DEBUG_MODE = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	77fb      	strb	r3, [r7, #31]
		char response[17] = {0};
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	731a      	strb	r2, [r3, #12]
		if(GPIO_Pin == GPIO_PIN_7 && lastPressedButton != 1) {
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b80      	cmp	r3, #128	; 0x80
 80011be:	d11a      	bne.n	80011f6 <HAL_GPIO_EXTI_Callback+0x66>
 80011c0:	4b7c      	ldr	r3, [pc, #496]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d016      	beq.n	80011f6 <HAL_GPIO_EXTI_Callback+0x66>
			pressCount++;
 80011c8:	4b79      	ldr	r3, [pc, #484]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b77      	ldr	r3, [pc, #476]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 80011d2:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 1;
 80011d4:	4b77      	ldr	r3, [pc, #476]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000001");
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4976      	ldr	r1, [pc, #472]	; (80013b8 <HAL_GPIO_EXTI_Callback+0x228>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fa2f 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 80011e6:	f107 010c 	add.w	r1, r7, #12
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	2211      	movs	r2, #17
 80011ee:	4873      	ldr	r0, [pc, #460]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 80011f0:	f003 f88a 	bl	8004308 <HAL_UART_Transmit>
 80011f4:	e0d9      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else if(GPIO_Pin == GPIO_PIN_9 && lastPressedButton != 2) {
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fc:	d11a      	bne.n	8001234 <HAL_GPIO_EXTI_Callback+0xa4>
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d016      	beq.n	8001234 <HAL_GPIO_EXTI_Callback+0xa4>
			pressCount++;
 8001206:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001210:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 2;
 8001212:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001214:	2202      	movs	r2, #2
 8001216:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000002");
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4968      	ldr	r1, [pc, #416]	; (80013c0 <HAL_GPIO_EXTI_Callback+0x230>)
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fa10 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 8001224:	f107 010c 	add.w	r1, r7, #12
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	2211      	movs	r2, #17
 800122c:	4863      	ldr	r0, [pc, #396]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 800122e:	f003 f86b 	bl	8004308 <HAL_UART_Transmit>
 8001232:	e0ba      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else if(GPIO_Pin == GPIO_PIN_11 && lastPressedButton != 3) {
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800123a:	d11a      	bne.n	8001272 <HAL_GPIO_EXTI_Callback+0xe2>
 800123c:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d016      	beq.n	8001272 <HAL_GPIO_EXTI_Callback+0xe2>
			pressCount++;
 8001244:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 800124e:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 3;
 8001250:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001252:	2203      	movs	r2, #3
 8001254:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000004");
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	495a      	ldr	r1, [pc, #360]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x234>)
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f9f1 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 8001262:	f107 010c 	add.w	r1, r7, #12
 8001266:	2364      	movs	r3, #100	; 0x64
 8001268:	2211      	movs	r2, #17
 800126a:	4854      	ldr	r0, [pc, #336]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 800126c:	f003 f84c 	bl	8004308 <HAL_UART_Transmit>
 8001270:	e09b      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else if(GPIO_Pin == GPIO_PIN_13 && lastPressedButton != 4) {
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001278:	d11a      	bne.n	80012b0 <HAL_GPIO_EXTI_Callback+0x120>
 800127a:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d016      	beq.n	80012b0 <HAL_GPIO_EXTI_Callback+0x120>
			pressCount++;
 8001282:	4b4b      	ldr	r3, [pc, #300]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 800128c:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 4;
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001290:	2204      	movs	r2, #4
 8001292:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000010");
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	494b      	ldr	r1, [pc, #300]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x238>)
 800129a:	4618      	mov	r0, r3
 800129c:	f004 f9d2 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 80012a0:	f107 010c 	add.w	r1, r7, #12
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	2211      	movs	r2, #17
 80012a8:	4844      	ldr	r0, [pc, #272]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 80012aa:	f003 f82d 	bl	8004308 <HAL_UART_Transmit>
 80012ae:	e07c      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else if(GPIO_Pin == GPIO_PIN_8 && lastPressedButton != 5) {
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b6:	d11a      	bne.n	80012ee <HAL_GPIO_EXTI_Callback+0x15e>
 80012b8:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d016      	beq.n	80012ee <HAL_GPIO_EXTI_Callback+0x15e>
			pressCount++;
 80012c0:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 80012ca:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 5;
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 80012ce:	2205      	movs	r2, #5
 80012d0:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000020");
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	493d      	ldr	r1, [pc, #244]	; (80013cc <HAL_GPIO_EXTI_Callback+0x23c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 f9b3 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 80012de:	f107 010c 	add.w	r1, r7, #12
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2211      	movs	r2, #17
 80012e6:	4835      	ldr	r0, [pc, #212]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 80012e8:	f003 f80e 	bl	8004308 <HAL_UART_Transmit>
 80012ec:	e05d      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else if(GPIO_Pin == GPIO_PIN_10 && lastPressedButton != 6) {
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f4:	d11a      	bne.n	800132c <HAL_GPIO_EXTI_Callback+0x19c>
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d016      	beq.n	800132c <HAL_GPIO_EXTI_Callback+0x19c>
			pressCount++;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001308:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 6;
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 800130c:	2206      	movs	r2, #6
 800130e:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000040");
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	492e      	ldr	r1, [pc, #184]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x240>)
 8001316:	4618      	mov	r0, r3
 8001318:	f004 f994 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 800131c:	f107 010c 	add.w	r1, r7, #12
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	2211      	movs	r2, #17
 8001324:	4825      	ldr	r0, [pc, #148]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 8001326:	f002 ffef 	bl	8004308 <HAL_UART_Transmit>
 800132a:	e03e      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else if(GPIO_Pin == GPIO_PIN_12 && lastPressedButton != 7) {
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001332:	d11a      	bne.n	800136a <HAL_GPIO_EXTI_Callback+0x1da>
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b07      	cmp	r3, #7
 800133a:	d016      	beq.n	800136a <HAL_GPIO_EXTI_Callback+0x1da>
			pressCount++;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001346:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 7;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 800134a:	2207      	movs	r2, #7
 800134c:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000080");
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4920      	ldr	r1, [pc, #128]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x244>)
 8001354:	4618      	mov	r0, r3
 8001356:	f004 f975 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 800135a:	f107 010c 	add.w	r1, r7, #12
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	2211      	movs	r2, #17
 8001362:	4816      	ldr	r0, [pc, #88]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 8001364:	f002 ffd0 	bl	8004308 <HAL_UART_Transmit>
 8001368:	e01f      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else if(GPIO_Pin == GPIO_PIN_14 && lastPressedButton != 8) {
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001370:	d11a      	bne.n	80013a8 <HAL_GPIO_EXTI_Callback+0x218>
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b08      	cmp	r3, #8
 8001378:	d016      	beq.n	80013a8 <HAL_GPIO_EXTI_Callback+0x218>
			pressCount++;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_GPIO_EXTI_Callback+0x220>)
 8001384:	701a      	strb	r2, [r3, #0]
			lastPressedButton = 8;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x224>)
 8001388:	2208      	movs	r2, #8
 800138a:	701a      	strb	r2, [r3, #0]
			sprintf(response, "ABP00000000000100");
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4911      	ldr	r1, [pc, #68]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x248>)
 8001392:	4618      	mov	r0, r3
 8001394:	f004 f956 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, response, 17, 100);
 8001398:	f107 010c 	add.w	r1, r7, #12
 800139c:	2364      	movs	r3, #100	; 0x64
 800139e:	2211      	movs	r2, #17
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <HAL_GPIO_EXTI_Callback+0x22c>)
 80013a2:	f002 ffb1 	bl	8004308 <HAL_UART_Transmit>
 80013a6:	e000      	b.n	80013aa <HAL_GPIO_EXTI_Callback+0x21a>
//			if(DEBUG == 1) HAL_UART_Transmit(&huart1, "\r\n", 2, 100); // DEBUG LINE REMOVE IN RELEASE
		} else {
			//Do not do anything when else.
//			__NOP();
			return;
 80013a8:	bf00      	nop
		}
	}
}
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000585 	.word	0x20000585
 80013b4:	20000584 	.word	0x20000584
 80013b8:	08005f74 	.word	0x08005f74
 80013bc:	20000524 	.word	0x20000524
 80013c0:	08005f88 	.word	0x08005f88
 80013c4:	08005f9c 	.word	0x08005f9c
 80013c8:	08005fb0 	.word	0x08005fb0
 80013cc:	08005fc4 	.word	0x08005fc4
 80013d0:	08005fd8 	.word	0x08005fd8
 80013d4:	08005fec 	.word	0x08005fec
 80013d8:	08006000 	.word	0x08006000

080013dc <InteractWithRC522>:

int cardPresented = 0;

void InteractWithRC522(void) {
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af02      	add	r7, sp, #8
	char buff[17];
	MFRC522_Init();
 80013e2:	f000 fd13 	bl	8001e0c <MFRC522_Init>

	HAL_Delay(20);
 80013e6:	2014      	movs	r0, #20
 80013e8:	f000 ffc6 	bl	8002378 <HAL_Delay>

	status = MI_ERR;
 80013ec:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <InteractWithRC522+0x108>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	701a      	strb	r2, [r3, #0]

	status = MFRC522_Request(PICC_REQIDL, str);
 80013f2:	493d      	ldr	r1, [pc, #244]	; (80014e8 <InteractWithRC522+0x10c>)
 80013f4:	2026      	movs	r0, #38	; 0x26
 80013f6:	f000 fb8f 	bl	8001b18 <MFRC522_Request>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <InteractWithRC522+0x108>)
 8001400:	701a      	strb	r2, [r3, #0]

	status = MFRC522_Anticoll(sn);
 8001402:	483a      	ldr	r0, [pc, #232]	; (80014ec <InteractWithRC522+0x110>)
 8001404:	f000 fc7c 	bl	8001d00 <MFRC522_Anticoll>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <InteractWithRC522+0x108>)
 800140e:	701a      	strb	r2, [r3, #0]
	MFRC522_Halt();
 8001410:	f000 fd45 	bl	8001e9e <MFRC522_Halt>
	MFRC522_AntennaOff();
 8001414:	f000 fd3b 	bl	8001e8e <MFRC522_AntennaOff>
	if (status == MI_OK) {
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <InteractWithRC522+0x108>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d120      	bne.n	8001462 <InteractWithRC522+0x86>
		if(cardPresented++ == 0) {
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <InteractWithRC522+0x114>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4932      	ldr	r1, [pc, #200]	; (80014f0 <InteractWithRC522+0x114>)
 8001428:	600a      	str	r2, [r1, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d151      	bne.n	80014d2 <InteractWithRC522+0xf6>
			sprintf(buff, "NCP%08x%02x%02x%02x", sn[0],sn[1],sn[2],sn[3]);
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <InteractWithRC522+0x110>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <InteractWithRC522+0x110>)
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	461c      	mov	r4, r3
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <InteractWithRC522+0x110>)
 800143c:	789b      	ldrb	r3, [r3, #2]
 800143e:	461a      	mov	r2, r3
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <InteractWithRC522+0x110>)
 8001442:	78db      	ldrb	r3, [r3, #3]
 8001444:	1d38      	adds	r0, r7, #4
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	9200      	str	r2, [sp, #0]
 800144a:	4623      	mov	r3, r4
 800144c:	460a      	mov	r2, r1
 800144e:	4929      	ldr	r1, [pc, #164]	; (80014f4 <InteractWithRC522+0x118>)
 8001450:	f004 f8f8 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, buff, 17, 100);
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	2364      	movs	r3, #100	; 0x64
 8001458:	2211      	movs	r2, #17
 800145a:	4827      	ldr	r0, [pc, #156]	; (80014f8 <InteractWithRC522+0x11c>)
 800145c:	f002 ff54 	bl	8004308 <HAL_UART_Transmit>
 8001460:	e037      	b.n	80014d2 <InteractWithRC522+0xf6>
		}
	}
	else {
		if(sn[0] != 0 && sn[1] != 0 && sn[2] != 0 && sn[3] != 0) {
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <InteractWithRC522+0x110>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d024      	beq.n	80014b4 <InteractWithRC522+0xd8>
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <InteractWithRC522+0x110>)
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d020      	beq.n	80014b4 <InteractWithRC522+0xd8>
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <InteractWithRC522+0x110>)
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01c      	beq.n	80014b4 <InteractWithRC522+0xd8>
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <InteractWithRC522+0x110>)
 800147c:	78db      	ldrb	r3, [r3, #3]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d018      	beq.n	80014b4 <InteractWithRC522+0xd8>
			sprintf(buff, "WCL%08x%02x%02x%02x", sn[0],sn[1],sn[2],sn[3]);
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <InteractWithRC522+0x110>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <InteractWithRC522+0x110>)
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	461c      	mov	r4, r3
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <InteractWithRC522+0x110>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	461a      	mov	r2, r3
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <InteractWithRC522+0x110>)
 8001496:	78db      	ldrb	r3, [r3, #3]
 8001498:	1d38      	adds	r0, r7, #4
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9200      	str	r2, [sp, #0]
 800149e:	4623      	mov	r3, r4
 80014a0:	460a      	mov	r2, r1
 80014a2:	4916      	ldr	r1, [pc, #88]	; (80014fc <InteractWithRC522+0x120>)
 80014a4:	f004 f8ce 	bl	8005644 <siprintf>
			HAL_UART_Transmit(&huart1, buff, 17, 100);
 80014a8:	1d39      	adds	r1, r7, #4
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	2211      	movs	r2, #17
 80014ae:	4812      	ldr	r0, [pc, #72]	; (80014f8 <InteractWithRC522+0x11c>)
 80014b0:	f002 ff2a 	bl	8004308 <HAL_UART_Transmit>
		}
		cardPresented = 0;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <InteractWithRC522+0x114>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
	  sn[0] = 0;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <InteractWithRC522+0x110>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	  sn[1] = 0;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <InteractWithRC522+0x110>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
	  sn[2] = 0;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <InteractWithRC522+0x110>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	709a      	strb	r2, [r3, #2]
	  sn[3] = 0;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <InteractWithRC522+0x110>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	70da      	strb	r2, [r3, #3]
	}

	MFRC522_Halt();
 80014d2:	f000 fce4 	bl	8001e9e <MFRC522_Halt>
	MFRC522_AntennaOff();
 80014d6:	f000 fcda 	bl	8001e8e <MFRC522_AntennaOff>
}
 80014da:	bf00      	nop
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd90      	pop	{r4, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000586 	.word	0x20000586
 80014e8:	2000058c 	.word	0x2000058c
 80014ec:	20000588 	.word	0x20000588
 80014f0:	2000059c 	.word	0x2000059c
 80014f4:	08005f14 	.word	0x08005f14
 80014f8:	20000524 	.word	0x20000524
 80014fc:	08006014 	.word	0x08006014

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <write_byte>:
};



void write_byte (uint8_t byte)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e018      	b.n	800154e <write_byte+0x42>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 800151c:	2200      	movs	r2, #0
 800151e:	2120      	movs	r1, #32
 8001520:	480f      	ldr	r0, [pc, #60]	; (8001560 <write_byte+0x54>)
 8001522:	f001 fa8d 	bl	8002a40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <write_byte+0x54>)
 8001534:	f001 fa84 	bl	8002a40 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 800153e:	2201      	movs	r2, #1
 8001540:	2120      	movs	r1, #32
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <write_byte+0x54>)
 8001544:	f001 fa7c 	bl	8002a40 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b07      	cmp	r3, #7
 8001552:	dde3      	ble.n	800151c <write_byte+0x10>
	}
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40020000 	.word	0x40020000

08001564 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8001574:	2200      	movs	r2, #0
 8001576:	2110      	movs	r1, #16
 8001578:	4810      	ldr	r0, [pc, #64]	; (80015bc <write_max_cmd+0x58>)
 800157a:	f001 fa61 	bl	8002a40 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e00a      	b.n	800159a <write_max_cmd+0x36>
	{
		write_byte (address);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ffc0 	bl	800150c <write_byte>
		write_byte (cmd); 
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ffbc 	bl	800150c <write_byte>
	for (int i=0;i<num; i++)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3301      	adds	r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2b03      	cmp	r3, #3
 800159e:	ddf1      	ble.n	8001584 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <write_max_cmd+0x58>)
 80015a6:	f001 fa4b 	bl	8002a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80015aa:	2201      	movs	r2, #1
 80015ac:	2110      	movs	r1, #16
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <write_max_cmd+0x58>)
 80015b0:	f001 fa46 	bl	8002a40 <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40020000 	.word	0x40020000

080015c0 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	460b      	mov	r3, r1
 80015cc:	71bb      	strb	r3, [r7, #6]
 80015ce:	4613      	mov	r3, r2
 80015d0:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00d      	beq.n	80015f4 <setled+0x34>
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <setled+0xd0>)
 80015dc:	5cd1      	ldrb	r1, [r2, r3]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2201      	movs	r2, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	b2d1      	uxtb	r1, r2
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <setled+0xd0>)
 80015f0:	54d1      	strb	r1, [r2, r3]
 80015f2:	e00e      	b.n	8001612 <setled+0x52>
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	4a26      	ldr	r2, [pc, #152]	; (8001690 <setled+0xd0>)
 80015f8:	5cd1      	ldrb	r1, [r2, r3]
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2201      	movs	r2, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	b2da      	uxtb	r2, r3
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	400a      	ands	r2, r1
 800160c:	b2d1      	uxtb	r1, r2
 800160e:	4a20      	ldr	r2, [pc, #128]	; (8001690 <setled+0xd0>)
 8001610:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8001622:	2200      	movs	r2, #0
 8001624:	2110      	movs	r1, #16
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <setled+0xd4>)
 8001628:	f001 fa0a 	bl	8002a40 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e01c      	b.n	800166c <setled+0xac>
	{
		if (i == (num-(n+1)))
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f1c3 0303 	rsb	r3, r3, #3
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	429a      	cmp	r2, r3
 800163c:	d10d      	bne.n	800165a <setled+0x9a>
		{
			write_byte (((c+1)));
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff60 	bl	800150c <write_byte>
			write_byte (buffer[col]);
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <setled+0xd0>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff5a 	bl	800150c <write_byte>
 8001658:	e005      	b.n	8001666 <setled+0xa6>
		}
		else
		{
			write_byte (0);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff ff56 	bl	800150c <write_byte>
			write_byte (0);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff ff53 	bl	800150c <write_byte>
	for (int i=0; i<num; i++) 
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b03      	cmp	r3, #3
 8001670:	dddf      	ble.n	8001632 <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8001672:	2200      	movs	r2, #0
 8001674:	2110      	movs	r1, #16
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <setled+0xd4>)
 8001678:	f001 f9e2 	bl	8002a40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 800167c:	2201      	movs	r2, #1
 800167e:	2110      	movs	r1, #16
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <setled+0xd4>)
 8001682:	f001 f9dd 	bl	8002a40 <HAL_GPIO_WritePin>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200005a0 	.word	0x200005a0
 8001694:	40020000 	.word	0x40020000

08001698 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	460a      	mov	r2, r1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	e02d      	b.n	800171e <setrow+0x86>
	{
		if (i == ((n)))
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d120      	bne.n	800170c <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	3307      	adds	r3, #7
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e015      	b.n	8001700 <setrow+0x68>
			{
				bool b = value&0x80;
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	b2d1      	uxtb	r1, r2
 80016ec:	7bba      	ldrb	r2, [r7, #14]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff66 	bl	80015c0 <setled>
				value<<=1;
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	429a      	cmp	r2, r3
 8001708:	dae4      	bge.n	80016d4 <setrow+0x3c>
 800170a:	e005      	b.n	8001718 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fefd 	bl	800150c <write_byte>
			write_byte (0);
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff fefa 	bl	800150c <write_byte>
	for (int i=0; i<num; i++) 
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3301      	adds	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	2b03      	cmp	r3, #3
 8001722:	ddce      	ble.n	80016c2 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4903      	ldr	r1, [pc, #12]	; (8001734 <setrow+0x9c>)
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	54ca      	strb	r2, [r1, r3]
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200005f0 	.word	0x200005f0

08001738 <shift_char>:
					break;
			}			
}	
		
void shift_char (char c, uint32_t speed, char direction)  
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <shift_char+0xa0>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	3301      	adds	r3, #1
 8001758:	60bb      	str	r3, [r7, #8]

		switch (direction)
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	2b4c      	cmp	r3, #76	; 0x4c
 800175e:	d002      	beq.n	8001766 <shift_char+0x2e>
 8001760:	2b52      	cmp	r3, #82	; 0x52
 8001762:	d01a      	beq.n	800179a <shift_char+0x62>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8001764:	e034      	b.n	80017d0 <shift_char+0x98>
					for (int j=start; j<(start+width+1); j++)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e00f      	b.n	800178c <shift_char+0x54>
						setrow (0, CH[j]);
 800176c:	4a1a      	ldr	r2, [pc, #104]	; (80017d8 <shift_char+0xa0>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff ff8e 	bl	8001698 <setrow>
						shiftleft();
 800177c:	f000 f878 	bl	8001870 <shiftleft>
						HAL_Delay (speed);
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f000 fdf9 	bl	8002378 <HAL_Delay>
					for (int j=start; j<(start+width+1); j++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	dde9      	ble.n	800176c <shift_char+0x34>
						break;
 8001798:	e01a      	b.n	80017d0 <shift_char+0x98>
					for (int j=start+width+1; j>=(start); j--)
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	3301      	adds	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e00f      	b.n	80017c6 <shift_char+0x8e>
						setrow ((num*8)-1, CH[j]);
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <shift_char+0xa0>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	201f      	movs	r0, #31
 80017b2:	f7ff ff71 	bl	8001698 <setrow>
						shiftright();
 80017b6:	f000 f893 	bl	80018e0 <shiftright>
						HAL_Delay (speed);
 80017ba:	6838      	ldr	r0, [r7, #0]
 80017bc:	f000 fddc 	bl	8002378 <HAL_Delay>
					for (int j=start+width+1; j>=(start); j--)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	daeb      	bge.n	80017a6 <shift_char+0x6e>
					break;
 80017ce:	bf00      	nop
			}
}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000000 	.word	0x20000000

080017dc <scroll_string>:



void scroll_string (uint8_t *string, uint32_t speed, char direction)
{	
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	4613      	mov	r3, r2
 80017e8:	71fb      	strb	r3, [r7, #7]
	while (*string != 0) 
 80017ea:	e009      	b.n	8001800 <scroll_string+0x24>
	{	
		shift_char (*string, speed, direction);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff9f 	bl	8001738 <shift_char>
		string++;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
	while (*string != 0) 
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f1      	bne.n	80017ec <scroll_string+0x10>
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <max_clear>:



void max_clear(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e008      	b.n	8001832 <max_clear+0x1e>
		setrow(i,0);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff36 	bl	8001698 <setrow>
	for (int i=0; i<num*8; i++) 
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b1f      	cmp	r3, #31
 8001836:	ddf3      	ble.n	8001820 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	e00c      	b.n	8001858 <max_clear+0x44>
	{
		buffer[i] = 0;
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <max_clear+0x54>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4413      	add	r3, r2
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <max_clear+0x58>)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b4f      	cmp	r3, #79	; 0x4f
 800185c:	ddef      	ble.n	800183e <max_clear+0x2a>
	}
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200005a0 	.word	0x200005a0
 800186c:	200005f0 	.word	0x200005f0

08001870 <shiftleft>:



void shiftleft(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
	int last = num*8-1;
 8001876:	231f      	movs	r3, #31
 8001878:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <shiftleft+0x6c>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e00c      	b.n	80018a4 <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4913      	ldr	r1, [pc, #76]	; (80018dc <shiftleft+0x6c>)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	440b      	add	r3, r1
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4619      	mov	r1, r3
 8001898:	4610      	mov	r0, r2
 800189a:	f7ff fefd 	bl	8001698 <setrow>
	for (i=0; i<num*8; i++)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b1f      	cmp	r3, #31
 80018a8:	ddef      	ble.n	800188a <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 80018aa:	234f      	movs	r3, #79	; 0x4f
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e00b      	b.n	80018c8 <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	4a09      	ldr	r2, [pc, #36]	; (80018dc <shiftleft+0x6c>)
 80018b6:	5cd1      	ldrb	r1, [r2, r3]
 80018b8:	4a08      	ldr	r2, [pc, #32]	; (80018dc <shiftleft+0x6c>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	460a      	mov	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	dcf0      	bgt.n	80018b0 <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 80018ce:	4a03      	ldr	r2, [pc, #12]	; (80018dc <shiftleft+0x6c>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	7013      	strb	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200005f0 	.word	0x200005f0

080018e0 <shiftright>:


void shiftright(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 80018e6:	231f      	movs	r3, #31
 80018e8:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <shiftright+0x68>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e00c      	b.n	8001910 <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4913      	ldr	r1, [pc, #76]	; (8001948 <shiftright+0x68>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	440b      	add	r3, r1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	4610      	mov	r0, r2
 8001906:	f7ff fec7 	bl	8001698 <setrow>
	for (int i=last; i>=0; i--)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	daef      	bge.n	80018f6 <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	e00b      	b.n	8001934 <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3301      	adds	r3, #1
 8001920:	4a09      	ldr	r2, [pc, #36]	; (8001948 <shiftright+0x68>)
 8001922:	5cd1      	ldrb	r1, [r2, r3]
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <shiftright+0x68>)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4413      	add	r3, r2
 800192a:	460a      	mov	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3301      	adds	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b4f      	cmp	r3, #79	; 0x4f
 8001938:	ddf0      	ble.n	800191c <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 800193a:	4a03      	ldr	r2, [pc, #12]	; (8001948 <shiftright+0x68>)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	77d3      	strb	r3, [r2, #31]
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200005f0 	.word	0x200005f0

0800194c <max_init>:



void max_init (uint8_t brightness)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8001956:	2100      	movs	r1, #0
 8001958:	2009      	movs	r0, #9
 800195a:	f7ff fe03 	bl	8001564 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 800195e:	2107      	movs	r1, #7
 8001960:	200b      	movs	r0, #11
 8001962:	f7ff fdff 	bl	8001564 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8001966:	2101      	movs	r1, #1
 8001968:	200c      	movs	r0, #12
 800196a:	f7ff fdfb 	bl	8001564 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 800196e:	2100      	movs	r1, #0
 8001970:	200f      	movs	r0, #15
 8001972:	f7ff fdf7 	bl	8001564 <write_max_cmd>
	
	max_clear ();
 8001976:	f7ff ff4d 	bl	8001814 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4619      	mov	r1, r3
 800197e:	200a      	movs	r0, #10
 8001980:	f7ff fdf0 	bl	8001564 <write_max_cmd>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800199a:	f107 0208 	add.w	r2, r7, #8
 800199e:	f107 010c 	add.w	r1, r7, #12
 80019a2:	230a      	movs	r3, #10
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <SPI1SendByte+0x2c>)
 80019aa:	f001 fdb6 	bl	800351a <HAL_SPI_TransmitReceive>
	return readValue[0];
 80019ae:	7a3b      	ldrb	r3, [r7, #8]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000484 	.word	0x20000484

080019bc <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <SPI1_WriteReg+0x40>)
 80019d4:	f001 f834 	bl	8002a40 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ffd6 	bl	800198c <SPI1SendByte>
	SPI1SendByte(value);
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffd2 	bl	800198c <SPI1SendByte>
	cs_set();
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <SPI1_WriteReg+0x40>)
 80019f0:	f001 f826 	bl	8002a40 <HAL_GPIO_WritePin>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020400 	.word	0x40020400

08001a00 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <SPI1_ReadReg+0x40>)
 8001a12:	f001 f815 	bl	8002a40 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffb7 	bl	800198c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff ffb4 	bl	800198c <SPI1SendByte>
 8001a24:	4603      	mov	r3, r0
 8001a26:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2e:	4804      	ldr	r0, [pc, #16]	; (8001a40 <SPI1_ReadReg+0x40>)
 8001a30:	f001 f806 	bl	8002a40 <HAL_GPIO_WritePin>
	return val;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40020400 	.word	0x40020400

08001a44 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	4613      	mov	r3, r2
 8001a52:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001a5e:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001a60:	79ba      	ldrb	r2, [r7, #6]
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffa8 	bl	80019bc <SPI1_WriteReg>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ffb3 	bl	8001a00 <SPI1_ReadReg>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73fb      	strb	r3, [r7, #15]
	return val;	
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ffda 	bl	8001a74 <MFRC522_ReadRegister>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ffb8 	bl	8001a44 <MFRC522_WriteRegister>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ffc0 	bl	8001a74 <MFRC522_ReadRegister>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b25a      	sxtb	r2, r3
 8001af8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	b25b      	sxtb	r3, r3
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff9a 	bl	8001a44 <MFRC522_WriteRegister>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001b24:	2107      	movs	r1, #7
 8001b26:	200d      	movs	r0, #13
 8001b28:	f7ff ff8c 	bl	8001a44 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	79fa      	ldrb	r2, [r7, #7]
 8001b30:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	200c      	movs	r0, #12
 8001b40:	f000 f80f 	bl	8001b62 <MFRC522_ToCard>
 8001b44:	4603      	mov	r3, r0
 8001b46:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <MFRC522_Request+0x3c>
 8001b4e:	89bb      	ldrh	r3, [r7, #12]
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d001      	beq.n	8001b58 <MFRC522_Request+0x40>
 8001b54:	2302      	movs	r3, #2
 8001b56:	73fb      	strb	r3, [r7, #15]
	return status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001b62:	b590      	push	{r4, r7, lr}
 8001b64:	b087      	sub	sp, #28
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	4613      	mov	r3, r2
 8001b72:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001b74:	2302      	movs	r3, #2
 8001b76:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d006      	beq.n	8001b94 <MFRC522_ToCard+0x32>
 8001b86:	2b0e      	cmp	r3, #14
 8001b88:	d109      	bne.n	8001b9e <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001b8e:	2310      	movs	r3, #16
 8001b90:	757b      	strb	r3, [r7, #21]
			break;
 8001b92:	e005      	b.n	8001ba0 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001b94:	2377      	movs	r3, #119	; 0x77
 8001b96:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001b98:	2330      	movs	r3, #48	; 0x30
 8001b9a:	757b      	strb	r3, [r7, #21]
			break;
 8001b9c:	e000      	b.n	8001ba0 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8001b9e:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001ba0:	7dbb      	ldrb	r3, [r7, #22]
 8001ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7ff ff4a 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	2004      	movs	r0, #4
 8001bb4:	f7ff ff92 	bl	8001adc <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f7ff ff74 	bl	8001aa8 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7ff ff3e 	bl	8001a44 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	827b      	strh	r3, [r7, #18]
 8001bcc:	e00a      	b.n	8001be4 <MFRC522_ToCard+0x82>
 8001bce:	8a7b      	ldrh	r3, [r7, #18]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	2009      	movs	r0, #9
 8001bda:	f7ff ff33 	bl	8001a44 <MFRC522_WriteRegister>
 8001bde:	8a7b      	ldrh	r3, [r7, #18]
 8001be0:	3301      	adds	r3, #1
 8001be2:	827b      	strh	r3, [r7, #18]
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8a7a      	ldrh	r2, [r7, #18]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3ef      	bcc.n	8001bce <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff ff26 	bl	8001a44 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d103      	bne.n	8001c06 <MFRC522_ToCard+0xa4>
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	200d      	movs	r0, #13
 8001c02:	f7ff ff51 	bl	8001aa8 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001c06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c0a:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001c0c:	2004      	movs	r0, #4
 8001c0e:	f7ff ff31 	bl	8001a74 <MFRC522_ReadRegister>
 8001c12:	4603      	mov	r3, r0
 8001c14:	753b      	strb	r3, [r7, #20]
		i--;
 8001c16:	8a7b      	ldrh	r3, [r7, #18]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001c1c:	8a7b      	ldrh	r3, [r7, #18]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00a      	beq.n	8001c38 <MFRC522_ToCard+0xd6>
 8001c22:	7d3b      	ldrb	r3, [r7, #20]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <MFRC522_ToCard+0xd6>
 8001c2c:	7d3a      	ldrb	r2, [r7, #20]
 8001c2e:	7d7b      	ldrb	r3, [r7, #21]
 8001c30:	4013      	ands	r3, r2
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0e9      	beq.n	8001c0c <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	200d      	movs	r0, #13
 8001c3c:	f7ff ff4e 	bl	8001adc <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001c40:	8a7b      	ldrh	r3, [r7, #18]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d057      	beq.n	8001cf6 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001c46:	2006      	movs	r0, #6
 8001c48:	f7ff ff14 	bl	8001a74 <MFRC522_ReadRegister>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f003 031b 	and.w	r3, r3, #27
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d14d      	bne.n	8001cf2 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001c5a:	7d3a      	ldrb	r2, [r7, #20]
 8001c5c:	7dbb      	ldrb	r3, [r7, #22]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MFRC522_ToCard+0x10c>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	d140      	bne.n	8001cf6 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001c74:	200a      	movs	r0, #10
 8001c76:	f7ff fefd 	bl	8001a74 <MFRC522_ReadRegister>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001c7e:	200c      	movs	r0, #12
 8001c80:	f7ff fef8 	bl	8001a74 <MFRC522_ReadRegister>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001c8c:	7c7b      	ldrb	r3, [r7, #17]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <MFRC522_ToCard+0x148>
 8001c92:	7d3b      	ldrb	r3, [r7, #20]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	7c7b      	ldrb	r3, [r7, #17]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	e005      	b.n	8001cb6 <MFRC522_ToCard+0x154>
 8001caa:	7d3b      	ldrb	r3, [r7, #20]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001cb6:	7d3b      	ldrb	r3, [r7, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <MFRC522_ToCard+0x15e>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001cc0:	7d3b      	ldrb	r3, [r7, #20]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d901      	bls.n	8001cca <MFRC522_ToCard+0x168>
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001cca:	2300      	movs	r3, #0
 8001ccc:	827b      	strh	r3, [r7, #18]
 8001cce:	e00a      	b.n	8001ce6 <MFRC522_ToCard+0x184>
 8001cd0:	8a7b      	ldrh	r3, [r7, #18]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	18d4      	adds	r4, r2, r3
 8001cd6:	2009      	movs	r0, #9
 8001cd8:	f7ff fecc 	bl	8001a74 <MFRC522_ReadRegister>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	7023      	strb	r3, [r4, #0]
 8001ce0:	8a7b      	ldrh	r3, [r7, #18]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	827b      	strh	r3, [r7, #18]
 8001ce6:	7d3b      	ldrb	r3, [r7, #20]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	8a7a      	ldrh	r2, [r7, #18]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3ef      	bcc.n	8001cd0 <MFRC522_ToCard+0x16e>
 8001cf0:	e001      	b.n	8001cf6 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	200d      	movs	r0, #13
 8001d10:	f7ff fe98 	bl	8001a44 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2293      	movs	r2, #147	; 0x93
 8001d18:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	2220      	movs	r2, #32
 8001d20:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001d22:	f107 030a 	add.w	r3, r7, #10
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	200c      	movs	r0, #12
 8001d30:	f7ff ff17 	bl	8001b62 <MFRC522_ToCard>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73bb      	strb	r3, [r7, #14]
 8001d42:	e009      	b.n	8001d58 <MFRC522_Anticoll+0x58>
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	4053      	eors	r3, r2
 8001d50:	737b      	strb	r3, [r7, #13]
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73bb      	strb	r3, [r7, #14]
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d9f2      	bls.n	8001d44 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	7b7a      	ldrb	r2, [r7, #13]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <MFRC522_Anticoll+0x70>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001d7a:	b590      	push	{r4, r7, lr}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	460b      	mov	r3, r1
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001d88:	2104      	movs	r1, #4
 8001d8a:	2005      	movs	r0, #5
 8001d8c:	f7ff fea6 	bl	8001adc <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	200a      	movs	r0, #10
 8001d94:	f7ff fe88 	bl	8001aa8 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001d98:	2300      	movs	r3, #0
 8001d9a:	75fb      	strb	r3, [r7, #23]
 8001d9c:	e00a      	b.n	8001db4 <MFRC522_CalculateCRC+0x3a>
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4619      	mov	r1, r3
 8001da8:	2009      	movs	r0, #9
 8001daa:	f7ff fe4b 	bl	8001a44 <MFRC522_WriteRegister>
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	3301      	adds	r3, #1
 8001db2:	75fb      	strb	r3, [r7, #23]
 8001db4:	7dfa      	ldrb	r2, [r7, #23]
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3f0      	bcc.n	8001d9e <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff fe40 	bl	8001a44 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001dc4:	23ff      	movs	r3, #255	; 0xff
 8001dc6:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001dc8:	2005      	movs	r0, #5
 8001dca:	f7ff fe53 	bl	8001a74 <MFRC522_ReadRegister>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75bb      	strb	r3, [r7, #22]
		i--;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <MFRC522_CalculateCRC+0x6e>
 8001dde:	7dbb      	ldrb	r3, [r7, #22]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ef      	beq.n	8001dc8 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001de8:	2022      	movs	r0, #34	; 0x22
 8001dea:	f7ff fe43 	bl	8001a74 <MFRC522_ReadRegister>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	1c5c      	adds	r4, r3, #1
 8001dfa:	2021      	movs	r0, #33	; 0x21
 8001dfc:	f7ff fe3a 	bl	8001a74 <MFRC522_ReadRegister>
 8001e00:	4603      	mov	r3, r0
 8001e02:	7023      	strb	r3, [r4, #0]
}
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}

08001e0c <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001e10:	f000 f820 	bl	8001e54 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001e14:	218d      	movs	r1, #141	; 0x8d
 8001e16:	202a      	movs	r0, #42	; 0x2a
 8001e18:	f7ff fe14 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001e1c:	213e      	movs	r1, #62	; 0x3e
 8001e1e:	202b      	movs	r0, #43	; 0x2b
 8001e20:	f7ff fe10 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001e24:	211e      	movs	r1, #30
 8001e26:	202d      	movs	r0, #45	; 0x2d
 8001e28:	f7ff fe0c 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff fe08 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001e34:	2170      	movs	r1, #112	; 0x70
 8001e36:	2026      	movs	r0, #38	; 0x26
 8001e38:	f7ff fe04 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	2015      	movs	r0, #21
 8001e40:	f7ff fe00 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001e44:	213d      	movs	r1, #61	; 0x3d
 8001e46:	2011      	movs	r0, #17
 8001e48:	f7ff fdfc 	bl	8001a44 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001e4c:	f000 f80a 	bl	8001e64 <MFRC522_AntennaOn>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001e58:	210f      	movs	r1, #15
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fdf2 	bl	8001a44 <MFRC522_WriteRegister>
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001e6a:	2014      	movs	r0, #20
 8001e6c:	f7ff fe02 	bl	8001a74 <MFRC522_ReadRegister>
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <MFRC522_AntennaOn+0x22>
 8001e7e:	2103      	movs	r1, #3
 8001e80:	2014      	movs	r0, #20
 8001e82:	f7ff fe11 	bl	8001aa8 <MFRC522_SetBitMask>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <MFRC522_AntennaOff>:

void MFRC522_AntennaOff(void) {
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001e92:	2103      	movs	r1, #3
 8001e94:	2014      	movs	r0, #20
 8001e96:	f7ff fe21 	bl	8001adc <MFRC522_ClearBitMask>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <MFRC522_Halt>:

void MFRC522_Halt(void) {
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001ea4:	2350      	movs	r3, #80	; 0x50
 8001ea6:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001eac:	463b      	mov	r3, r7
 8001eae:	1c9a      	adds	r2, r3, #2
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff60 	bl	8001d7a <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001eba:	463a      	mov	r2, r7
 8001ebc:	4639      	mov	r1, r7
 8001ebe:	1dbb      	adds	r3, r7, #6
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	200c      	movs	r0, #12
 8001ec8:	f7ff fe4b 	bl	8001b62 <MFRC522_ToCard>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <HAL_SPI_MspInit+0xc0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d14a      	bne.n	8001fdc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_SPI_MspInit+0xc4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001faa:	2305      	movs	r3, #5
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <HAL_SPI_MspInit+0xc8>)
 8001fb6:	f000 fba7 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fcc:	2305      	movs	r3, #5
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <HAL_SPI_MspInit+0xcc>)
 8001fd8:	f000 fb96 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40003800 	.word	0x40003800
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020400 	.word	0x40020400

08001ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_TIM_Base_MspInit+0x48>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d115      	bne.n	8002032 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_TIM_Base_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <HAL_TIM_Base_MspInit+0x4c>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_TIM_Base_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	201e      	movs	r0, #30
 8002028:	f000 faa5 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800202c:	201e      	movs	r0, #30
 800202e:	f000 fabe 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40000800 	.word	0x40000800
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_UART_MspInit+0x94>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d134      	bne.n	80020d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_UART_MspInit+0x98>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_UART_MspInit+0x98>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800209e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020b0:	2307      	movs	r3, #7
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4809      	ldr	r0, [pc, #36]	; (80020e0 <HAL_UART_MspInit+0x9c>)
 80020bc:	f000 fb24 	bl	8002708 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2025      	movs	r0, #37	; 0x25
 80020c6:	f000 fa56 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020ca:	2025      	movs	r0, #37	; 0x25
 80020cc:	f000 fa6f 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 f902 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 800213c:	2080      	movs	r0, #128	; 0x80
 800213e:	f000 fcb3 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_5_Pin);
 8002142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002146:	f000 fcaf 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 800214a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800214e:	f000 fcab 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <TIM4_IRQHandler+0x10>)
 800215e:	f001 fc98 	bl	8003a92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200004dc 	.word	0x200004dc

0800216c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <USART1_IRQHandler+0x10>)
 8002172:	f002 f98b 	bl	800448c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000524 	.word	0x20000524

08002180 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_6_Pin);
 8002184:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002188:	f000 fc8e 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 800218c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002190:	f000 fc8a 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_7_Pin);
 8002194:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002198:	f000 fc86 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 800219c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021a0:	f000 fc82 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_8_Pin);
 80021a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021a8:	f000 fc7e 	bl	8002aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f003 f8bc 	bl	800535c <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20020000 	.word	0x20020000
 8002210:	00000400 	.word	0x00000400
 8002214:	20000640 	.word	0x20000640
 8002218:	20000658 	.word	0x20000658

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002246:	490e      	ldr	r1, [pc, #56]	; (8002280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800225c:	4c0b      	ldr	r4, [pc, #44]	; (800228c <LoopFillZerobss+0x26>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800226a:	f7ff ffd7 	bl	800221c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226e:	f003 f87b 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002272:	f7fe f997 	bl	80005a4 <main>
  bx  lr    
 8002276:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002284:	08006184 	.word	0x08006184
  ldr r2, =_sbss
 8002288:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 800228c:	20000658 	.word	0x20000658

08002290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_Init+0x40>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_Init+0x40>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_Init+0x40>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f94f 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	200f      	movs	r0, #15
 80022c4:	f000 f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff fe04 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f967 	bl	80025ca <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 f92f 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200003f8 	.word	0x200003f8
 8002330:	20000400 	.word	0x20000400
 8002334:	200003fc 	.word	0x200003fc

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000400 	.word	0x20000400
 800235c:	20000644 	.word	0x20000644

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000644 	.word	0x20000644

08002378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff ffee 	bl	8002360 <HAL_GetTick>
 8002384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d005      	beq.n	800239e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_Delay+0x44>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800239e:	bf00      	nop
 80023a0:	f7ff ffde 	bl	8002360 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f7      	bhi.n	80023a0 <HAL_Delay+0x28>
  {
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000400 	.word	0x20000400

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff3e 	bl	8002408 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff8e 	bl	80024b4 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5d 	bl	8002460 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff31 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff feb6 	bl	8002360 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d008      	beq.n	8002614 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e052      	b.n	80026ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0216 	bic.w	r2, r2, #22
 8002622:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002632:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <HAL_DMA_Abort+0x62>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0208 	bic.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002664:	e013      	b.n	800268e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002666:	f7ff fe7b 	bl	8002360 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b05      	cmp	r3, #5
 8002672:	d90c      	bls.n	800268e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e015      	b.n	80026ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e4      	bne.n	8002666 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	223f      	movs	r2, #63	; 0x3f
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d004      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e00c      	b.n	80026fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2205      	movs	r2, #5
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	e16b      	b.n	80029fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	f040 815a 	bne.w	80029f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d005      	beq.n	800275a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002756:	2b02      	cmp	r3, #2
 8002758:	d130      	bne.n	80027bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 0201 	and.w	r2, r3, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d017      	beq.n	80027f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d123      	bne.n	800284c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	220f      	movs	r2, #15
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80b4 	beq.w	80029f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <HAL_GPIO_Init+0x30c>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a5f      	ldr	r2, [pc, #380]	; (8002a14 <HAL_GPIO_Init+0x30c>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <HAL_GPIO_Init+0x30c>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028aa:	4a5b      	ldr	r2, [pc, #364]	; (8002a18 <HAL_GPIO_Init+0x310>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_GPIO_Init+0x314>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02b      	beq.n	800292e <HAL_GPIO_Init+0x226>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a51      	ldr	r2, [pc, #324]	; (8002a20 <HAL_GPIO_Init+0x318>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d025      	beq.n	800292a <HAL_GPIO_Init+0x222>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <HAL_GPIO_Init+0x31c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01f      	beq.n	8002926 <HAL_GPIO_Init+0x21e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4f      	ldr	r2, [pc, #316]	; (8002a28 <HAL_GPIO_Init+0x320>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x21a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4e      	ldr	r2, [pc, #312]	; (8002a2c <HAL_GPIO_Init+0x324>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x216>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4d      	ldr	r2, [pc, #308]	; (8002a30 <HAL_GPIO_Init+0x328>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x212>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <HAL_GPIO_Init+0x32c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <HAL_GPIO_Init+0x330>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x20a>
 800290e:	2307      	movs	r3, #7
 8002910:	e00e      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002912:	2308      	movs	r3, #8
 8002914:	e00c      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002916:	2306      	movs	r3, #6
 8002918:	e00a      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800291a:	2305      	movs	r3, #5
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800291e:	2304      	movs	r3, #4
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x228>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x228>
 800292e:	2300      	movs	r3, #0
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	; (8002a18 <HAL_GPIO_Init+0x310>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_GPIO_Init+0x334>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002972:	4a32      	ldr	r2, [pc, #200]	; (8002a3c <HAL_GPIO_Init+0x334>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <HAL_GPIO_Init+0x334>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800299c:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <HAL_GPIO_Init+0x334>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_GPIO_Init+0x334>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_GPIO_Init+0x334>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_GPIO_Init+0x334>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <HAL_GPIO_Init+0x334>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	f67f ae90 	bls.w	8002724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021400 	.word	0x40021400
 8002a34:	40021800 	.word	0x40021800
 8002a38:	40021c00 	.word	0x40021c00
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a84:	887a      	ldrh	r2, [r7, #2]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	041a      	lsls	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	400b      	ands	r3, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	619a      	str	r2, [r3, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fb62 	bl	8001190 <HAL_GPIO_EXTI_Callback>
  }
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40013c00 	.word	0x40013c00

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e267      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e242      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6f      	ldr	r2, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6c      	ldr	r2, [pc, #432]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a68      	ldr	r2, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a65      	ldr	r2, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7ff fbe6 	bl	8002360 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7ff fbe2 	bl	8002360 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e207      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fbd2 	bl	8002360 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fbce 	bl	8002360 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1f3      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b44      	ldr	r3, [pc, #272]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c7      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7ff fb87 	bl	8002360 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7ff fb83 	bl	8002360 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a8      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4925      	ldr	r1, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7ff fb66 	bl	8002360 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7ff fb62 	bl	8002360 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e187      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7ff fb46 	bl	8002360 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7ff fb42 	bl	8002360 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e167      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7ff fb2f 	bl	8002360 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d06:	f7ff fb2b 	bl	8002360 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e150      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8097 	beq.w	8002e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a73      	ldr	r2, [pc, #460]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7ff faeb 	bl	8002360 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7ff fae7 	bl	8002360 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e10c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2ea>
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x30c>
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002de4:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7ff faac 	bl	8002360 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7ff faa8 	bl	8002360 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0cb      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RCC_OscConfig+0x334>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7ff fa96 	bl	8002360 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7ff fa92 	bl	8002360 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b5      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ee      	bne.n	8002e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a1 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d05c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d141      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7ff fa66 	bl	8002360 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7ff fa62 	bl	8002360 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e087      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7ff fa3b 	bl	8002360 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7ff fa37 	bl	8002360 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x416>
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7ff fa24 	bl	8002360 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7ff fa20 	bl	8002360 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e045      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x444>
 8002f3a:	e03d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d121      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7ff f952 	bl	8002360 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7ff f94e 	bl	8002360 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f821 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f8b2 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08006028 	.word	0x08006028
 800318c:	200003f8 	.word	0x200003f8
 8003190:	200003fc 	.word	0x200003fc

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b094      	sub	sp, #80	; 0x50
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	647b      	str	r3, [r7, #68]	; 0x44
 80031a0:	2300      	movs	r3, #0
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a4:	2300      	movs	r3, #0
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ac:	4b79      	ldr	r3, [pc, #484]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d00d      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x40>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	f200 80e1 	bhi.w	8003380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x3a>
 80031c6:	e0db      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b73      	ldr	r3, [pc, #460]	; (8003398 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031cc:	e0db      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_GetSysClockFreq+0x208>)
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d2:	e0d8      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031de:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d063      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	2200      	movs	r2, #0
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	f04f 0000 	mov.w	r0, #0
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	0159      	lsls	r1, r3, #5
 8003214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003218:	0150      	lsls	r0, r2, #5
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4621      	mov	r1, r4
 8003220:	1a51      	subs	r1, r2, r1
 8003222:	6139      	str	r1, [r7, #16]
 8003224:	4629      	mov	r1, r5
 8003226:	eb63 0301 	sbc.w	r3, r3, r1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003238:	4659      	mov	r1, fp
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	4651      	mov	r1, sl
 800323e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003242:	4651      	mov	r1, sl
 8003244:	018a      	lsls	r2, r1, #6
 8003246:	4651      	mov	r1, sl
 8003248:	ebb2 0801 	subs.w	r8, r2, r1
 800324c:	4659      	mov	r1, fp
 800324e:	eb63 0901 	sbc.w	r9, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003266:	4690      	mov	r8, r2
 8003268:	4699      	mov	r9, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb18 0303 	adds.w	r3, r8, r3
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	462b      	mov	r3, r5
 8003274:	eb49 0303 	adc.w	r3, r9, r3
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003286:	4629      	mov	r1, r5
 8003288:	024b      	lsls	r3, r1, #9
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003290:	4621      	mov	r1, r4
 8003292:	024a      	lsls	r2, r1, #9
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329a:	2200      	movs	r2, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 800329e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a4:	f7fc fffc 	bl	80002a0 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	e058      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	2200      	movs	r2, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	4611      	mov	r1, r2
 80032be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
 80032c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	0159      	lsls	r1, r3, #5
 80032da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032de:	0150      	lsls	r0, r2, #5
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4641      	mov	r1, r8
 80032e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ea:	4649      	mov	r1, r9
 80032ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003304:	ebb2 040a 	subs.w	r4, r2, sl
 8003308:	eb63 050b 	sbc.w	r5, r3, fp
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	00eb      	lsls	r3, r5, #3
 8003316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	4614      	mov	r4, r2
 800331e:	461d      	mov	r5, r3
 8003320:	4643      	mov	r3, r8
 8003322:	18e3      	adds	r3, r4, r3
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	464b      	mov	r3, r9
 8003328:	eb45 0303 	adc.w	r3, r5, r3
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333a:	4629      	mov	r1, r5
 800333c:	028b      	lsls	r3, r1, #10
 800333e:	4621      	mov	r1, r4
 8003340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003344:	4621      	mov	r1, r4
 8003346:	028a      	lsls	r2, r1, #10
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334e:	2200      	movs	r2, #0
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	61fa      	str	r2, [r7, #28]
 8003354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003358:	f7fc ffa2 	bl	80002a0 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800337e:	e002      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetSysClockFreq+0x204>)
 8003382:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003388:	4618      	mov	r0, r3
 800338a:	3750      	adds	r7, #80	; 0x50
 800338c:	46bd      	mov	sp, r7
 800338e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	007a1200 	.word	0x007a1200

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	200003f8 	.word	0x200003f8

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08006038 	.word	0x08006038

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e4:	f7ff ffdc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0b5b      	lsrs	r3, r3, #13
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	08006038 	.word	0x08006038

08003408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07b      	b.n	8003512 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342a:	d009      	beq.n	8003440 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
 8003432:	e005      	b.n	8003440 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe fd62 	bl	8001f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003476:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	ea42 0103 	orr.w	r1, r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	f003 0104 	and.w	r1, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f003 0210 	and.w	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003500:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b08c      	sub	sp, #48	; 0x30
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003528:	2301      	movs	r3, #1
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x26>
 800353c:	2302      	movs	r3, #2
 800353e:	e18a      	b.n	8003856 <HAL_SPI_TransmitReceive+0x33c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003548:	f7fe ff0a 	bl	8002360 <HAL_GetTick>
 800354c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800355e:	887b      	ldrh	r3, [r7, #2]
 8003560:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003566:	2b01      	cmp	r3, #1
 8003568:	d00f      	beq.n	800358a <HAL_SPI_TransmitReceive+0x70>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003570:	d107      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x68>
 800357a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800357e:	2b04      	cmp	r3, #4
 8003580:	d003      	beq.n	800358a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003582:	2302      	movs	r3, #2
 8003584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003588:	e15b      	b.n	8003842 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_SPI_TransmitReceive+0x82>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_SPI_TransmitReceive+0x82>
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035a2:	e14e      	b.n	8003842 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d003      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2205      	movs	r2, #5
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	887a      	ldrh	r2, [r7, #2]
 80035ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	887a      	ldrh	r2, [r7, #2]
 80035da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d007      	beq.n	800360c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003614:	d178      	bne.n	8003708 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x10a>
 800361e:	8b7b      	ldrh	r3, [r7, #26]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d166      	bne.n	80036f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	1c9a      	adds	r2, r3, #2
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003648:	e053      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d11b      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x176>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x176>
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d113      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	1c9a      	adds	r2, r3, #2
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d119      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x1b8>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d014      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	b292      	uxth	r2, r2
 80036b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036ce:	2301      	movs	r3, #1
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036d2:	f7fe fe45 	bl	8002360 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036de:	429a      	cmp	r2, r3
 80036e0:	d807      	bhi.n	80036f2 <HAL_SPI_TransmitReceive+0x1d8>
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d003      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036f0:	e0a7      	b.n	8003842 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1a6      	bne.n	800364a <HAL_SPI_TransmitReceive+0x130>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1a1      	bne.n	800364a <HAL_SPI_TransmitReceive+0x130>
 8003706:	e07c      	b.n	8003802 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x1fc>
 8003710:	8b7b      	ldrh	r3, [r7, #26]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d16b      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	7812      	ldrb	r2, [r2, #0]
 8003722:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800373c:	e057      	b.n	80037ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d11c      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x26c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d017      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x26c>
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d114      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	7812      	ldrb	r2, [r2, #0]
 8003768:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d119      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x2ae>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d014      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037c4:	2301      	movs	r3, #1
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037c8:	f7fe fdca 	bl	8002360 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d803      	bhi.n	80037e0 <HAL_SPI_TransmitReceive+0x2c6>
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d102      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x2cc>
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037ec:	e029      	b.n	8003842 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1a2      	bne.n	800373e <HAL_SPI_TransmitReceive+0x224>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d19d      	bne.n	800373e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f8b2 	bl	8003970 <SPI_EndRxTxTransaction>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800381e:	e010      	b.n	8003842 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	e000      	b.n	8003842 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003840:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003856:	4618      	mov	r0, r3
 8003858:	3730      	adds	r7, #48	; 0x30
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003870:	f7fe fd76 	bl	8002360 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	4413      	add	r3, r2
 800387e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003880:	f7fe fd6e 	bl	8002360 <HAL_GetTick>
 8003884:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	015b      	lsls	r3, r3, #5
 800388c:	0d1b      	lsrs	r3, r3, #20
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003896:	e054      	b.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d050      	beq.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a0:	f7fe fd5e 	bl	8002360 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d902      	bls.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d13d      	bne.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ce:	d111      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d8:	d004      	beq.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e2:	d107      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d10f      	bne.n	800391e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e017      	b.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3b01      	subs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	429a      	cmp	r2, r3
 800395e:	d19b      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200003f8 	.word	0x200003f8

08003970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <SPI_EndRxTxTransaction+0x7c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <SPI_EndRxTxTransaction+0x80>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0d5b      	lsrs	r3, r3, #21
 8003988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399a:	d112      	bne.n	80039c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2200      	movs	r2, #0
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f7ff ff5a 	bl	8003860 <SPI_WaitFlagStateUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0220 	orr.w	r2, r3, #32
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e00f      	b.n	80039e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d0f2      	beq.n	80039c2 <SPI_EndRxTxTransaction+0x52>
 80039dc:	e000      	b.n	80039e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80039de:	bf00      	nop
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200003f8 	.word	0x200003f8
 80039f0:	165e9f81 	.word	0x165e9f81

080039f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e041      	b.n	8003a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe faea 	bl	8001ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fa2e 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d122      	bne.n	8003aee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d11b      	bne.n	8003aee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f06f 0202 	mvn.w	r2, #2
 8003abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9bf 	bl	8003e58 <HAL_TIM_IC_CaptureCallback>
 8003ada:	e005      	b.n	8003ae8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9b1 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9c2 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d122      	bne.n	8003b42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d11b      	bne.n	8003b42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f06f 0204 	mvn.w	r2, #4
 8003b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f995 	bl	8003e58 <HAL_TIM_IC_CaptureCallback>
 8003b2e:	e005      	b.n	8003b3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f987 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f998 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d122      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d11b      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0208 	mvn.w	r2, #8
 8003b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f96b 	bl	8003e58 <HAL_TIM_IC_CaptureCallback>
 8003b82:	e005      	b.n	8003b90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f95d 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f96e 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d122      	bne.n	8003bea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d11b      	bne.n	8003bea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0210 	mvn.w	r2, #16
 8003bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f941 	bl	8003e58 <HAL_TIM_IC_CaptureCallback>
 8003bd6:	e005      	b.n	8003be4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f933 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f944 	bl	8003e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d10e      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0201 	mvn.w	r2, #1
 8003c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f90d 	bl	8003e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d10e      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fae9 	bl	8004214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d10e      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d107      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f909 	bl	8003e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d10e      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d107      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f06f 0220 	mvn.w	r2, #32
 8003c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fab3 	bl	8004200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_ConfigClockSource+0x1c>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0b4      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x186>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cdc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf6:	d03e      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfc:	f200 8087 	bhi.w	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	f000 8086 	beq.w	8003e14 <HAL_TIM_ConfigClockSource+0x172>
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d87f      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d0e:	2b70      	cmp	r3, #112	; 0x70
 8003d10:	d01a      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0xa6>
 8003d12:	2b70      	cmp	r3, #112	; 0x70
 8003d14:	d87b      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d16:	2b60      	cmp	r3, #96	; 0x60
 8003d18:	d050      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0x11a>
 8003d1a:	2b60      	cmp	r3, #96	; 0x60
 8003d1c:	d877      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d1e:	2b50      	cmp	r3, #80	; 0x50
 8003d20:	d03c      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0xfa>
 8003d22:	2b50      	cmp	r3, #80	; 0x50
 8003d24:	d873      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d058      	beq.n	8003ddc <HAL_TIM_ConfigClockSource+0x13a>
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d86f      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d2e:	2b30      	cmp	r3, #48	; 0x30
 8003d30:	d064      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0x15a>
 8003d32:	2b30      	cmp	r3, #48	; 0x30
 8003d34:	d86b      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d060      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0x15a>
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d867      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d05c      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0x15a>
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d05a      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0x15a>
 8003d46:	e062      	b.n	8003e0e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f000 f9b6 	bl	80040c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]
      break;
 8003d74:	e04f      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f000 f99f 	bl	80040c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d98:	609a      	str	r2, [r3, #8]
      break;
 8003d9a:	e03c      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f000 f913 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2150      	movs	r1, #80	; 0x50
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f96c 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003dba:	e02c      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f000 f932 	bl	8004032 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2160      	movs	r1, #96	; 0x60
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f95c 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003dda:	e01c      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f000 f8f3 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2140      	movs	r1, #64	; 0x40
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f94c 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003dfa:	e00c      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f000 f943 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e003      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      break;
 8003e12:	e000      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3d      	ldr	r2, [pc, #244]	; (8003fac <TIM_Base_SetConfig+0x118>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3c      	ldr	r2, [pc, #240]	; (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3a      	ldr	r2, [pc, #232]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d027      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <TIM_Base_SetConfig+0x118>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d023      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2b      	ldr	r2, [pc, #172]	; (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01f      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d017      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <TIM_Base_SetConfig+0x128>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00f      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <TIM_Base_SetConfig+0x134>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a24      	ldr	r2, [pc, #144]	; (8003fcc <TIM_Base_SetConfig+0x138>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <TIM_Base_SetConfig+0x13c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d108      	bne.n	8003f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0xf8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d103      	bne.n	8003f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	615a      	str	r2, [r3, #20]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800
 8003fb4:	40000c00 	.word	0x40000c00
 8003fb8:	40010400 	.word	0x40010400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800
 8003fc8:	40001800 	.word	0x40001800
 8003fcc:	40001c00 	.word	0x40001c00
 8003fd0:	40002000 	.word	0x40002000

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0210 	bic.w	r2, r3, #16
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800405c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	031b      	lsls	r3, r3, #12
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800406e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f043 0307 	orr.w	r3, r3, #7
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	021a      	lsls	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800411c:	2302      	movs	r3, #2
 800411e:	e05a      	b.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d022      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416c:	d01d      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1d      	ldr	r2, [pc, #116]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d018      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1a      	ldr	r2, [pc, #104]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a15      	ldr	r2, [pc, #84]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10c      	bne.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40010400 	.word	0x40010400
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40001800 	.word	0x40001800

08004200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	460b      	mov	r3, r1
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e05f      	b.n	8004300 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7fd fef5 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2224      	movs	r2, #36	; 0x24
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004270:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fdfe 	bl	8004e74 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004286:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004296:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 020f 	bic.w	r2, r2, #15
 80042a6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6919      	ldr	r1, [r3, #16]
 80042ae:	7afa      	ldrb	r2, [r7, #11]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c6:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68d9      	ldr	r1, [r3, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b20      	cmp	r3, #32
 8004326:	d17c      	bne.n	8004422 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_UART_Transmit+0x2c>
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e075      	b.n	8004424 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_UART_Transmit+0x3e>
 8004342:	2302      	movs	r3, #2
 8004344:	e06e      	b.n	8004424 <HAL_UART_Transmit+0x11c>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2221      	movs	r2, #33	; 0x21
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435c:	f7fe f800 	bl	8002360 <HAL_GetTick>
 8004360:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d108      	bne.n	800438a <HAL_UART_Transmit+0x82>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d104      	bne.n	800438a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	e003      	b.n	8004392 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800439a:	e02a      	b.n	80043f2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fb1e 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e036      	b.n	8004424 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	3302      	adds	r3, #2
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e007      	b.n	80043e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1cf      	bne.n	800439c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2200      	movs	r2, #0
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 faee 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e006      	b.n	8004424 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b20      	cmp	r3, #32
 8004444:	d11d      	bne.n	8004482 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_UART_Receive_IT+0x26>
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e016      	b.n	8004484 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UART_Receive_IT+0x38>
 8004460:	2302      	movs	r3, #2
 8004462:	e00f      	b.n	8004484 <HAL_UART_Receive_IT+0x58>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	461a      	mov	r2, r3
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fb23 	bl	8004ac4 <UART_Start_Receive_IT>
 800447e:	4603      	mov	r3, r0
 8004480:	e000      	b.n	8004484 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b0ba      	sub	sp, #232	; 0xe8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_UART_IRQHandler+0x66>
 80044de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fc07 	bl	8004cfe <UART_Receive_IT>
      return;
 80044f0:	e256      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80de 	beq.w	80046b8 <HAL_UART_IRQHandler+0x22c>
 80044fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80d1 	beq.w	80046b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_UART_IRQHandler+0xae>
 8004522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_UART_IRQHandler+0xd2>
 8004546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f043 0202 	orr.w	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <HAL_UART_IRQHandler+0xf6>
 800456a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f043 0204 	orr.w	r2, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d011      	beq.n	80045b2 <HAL_UART_IRQHandler+0x126>
 800458e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d105      	bne.n	80045a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f043 0208 	orr.w	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 81ed 	beq.w	8004996 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_UART_IRQHandler+0x14e>
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb92 	bl	8004cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <HAL_UART_IRQHandler+0x17a>
 80045fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04f      	beq.n	80046a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa9a 	bl	8004b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d141      	bne.n	800469e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3314      	adds	r3, #20
 8004642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800464a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800465e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1d9      	bne.n	800461a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d013      	beq.n	8004696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	4a7d      	ldr	r2, [pc, #500]	; (8004868 <HAL_UART_IRQHandler+0x3dc>)
 8004674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe f821 	bl	80026c2 <HAL_DMA_Abort_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004690:	4610      	mov	r0, r2
 8004692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	e00e      	b.n	80046b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f990 	bl	80049bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e00a      	b.n	80046b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f98c 	bl	80049bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e006      	b.n	80046b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f988 	bl	80049bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046b2:	e170      	b.n	8004996 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	bf00      	nop
    return;
 80046b6:	e16e      	b.n	8004996 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	2b01      	cmp	r3, #1
 80046be:	f040 814a 	bne.w	8004956 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8143 	beq.w	8004956 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 813c 	beq.w	8004956 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	f040 80b4 	bne.w	800486c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8140 	beq.w	800499a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004722:	429a      	cmp	r2, r3
 8004724:	f080 8139 	bcs.w	800499a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800472e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473a:	f000 8088 	beq.w	800484e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800475c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800476a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800476e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1d9      	bne.n	800473e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800479a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e1      	bne.n	800478a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e3      	bne.n	80047c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	f023 0310 	bic.w	r3, r3, #16
 8004822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004830:	65ba      	str	r2, [r7, #88]	; 0x58
 8004832:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800483e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e3      	bne.n	800480c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	4618      	mov	r0, r3
 800484a:	f7fd feca 	bl	80025e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004856:	b29b      	uxth	r3, r3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8b6 	bl	80049d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004864:	e099      	b.n	800499a <HAL_UART_IRQHandler+0x50e>
 8004866:	bf00      	nop
 8004868:	08004c07 	.word	0x08004c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004874:	b29b      	uxth	r3, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 808b 	beq.w	800499e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8086 	beq.w	800499e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048b6:	647a      	str	r2, [r7, #68]	; 0x44
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e3      	bne.n	8004892 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	623b      	str	r3, [r7, #32]
   return(result);
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048ee:	633a      	str	r2, [r7, #48]	; 0x30
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004934:	61fa      	str	r2, [r7, #28]
 8004936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e3      	bne.n	8004910 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f83e 	bl	80049d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004954:	e023      	b.n	800499e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_UART_IRQHandler+0x4ea>
 8004962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f95d 	bl	8004c2e <UART_Transmit_IT>
    return;
 8004974:	e014      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <HAL_UART_IRQHandler+0x514>
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f99d 	bl	8004cce <UART_EndTransmit_IT>
    return;
 8004994:	e004      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
      return;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
      return;
 800499e:	bf00      	nop
  }
}
 80049a0:	37e8      	adds	r7, #232	; 0xe8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop

080049a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b090      	sub	sp, #64	; 0x40
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	e050      	b.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d04c      	beq.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a08:	f7fd fcaa 	bl	8002360 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d241      	bcs.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a38:	637a      	str	r2, [r7, #52]	; 0x34
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e5      	bne.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6c:	623a      	str	r2, [r7, #32]
 8004a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e00f      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d09f      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3740      	adds	r7, #64	; 0x40
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2222      	movs	r2, #34	; 0x22
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0220 	orr.w	r2, r2, #32
 8004b30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b095      	sub	sp, #84	; 0x54
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b68:	643a      	str	r2, [r7, #64]	; 0x40
 8004b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e5      	bne.n	8004b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d119      	bne.n	8004bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f023 0310 	bic.w	r3, r3, #16
 8004bce:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd8:	61ba      	str	r2, [r7, #24]
 8004bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6979      	ldr	r1, [r7, #20]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	613b      	str	r3, [r7, #16]
   return(result);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bfa:	bf00      	nop
 8004bfc:	3754      	adds	r7, #84	; 0x54
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff fecb 	bl	80049bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b21      	cmp	r3, #33	; 0x21
 8004c40:	d13e      	bne.n	8004cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	d114      	bne.n	8004c76 <UART_Transmit_IT+0x48>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d110      	bne.n	8004c76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	1c9a      	adds	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	621a      	str	r2, [r3, #32]
 8004c74:	e008      	b.n	8004c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6211      	str	r1, [r2, #32]
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4619      	mov	r1, r3
 8004c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10f      	bne.n	8004cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fe5a 	bl	80049a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b08c      	sub	sp, #48	; 0x30
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b22      	cmp	r3, #34	; 0x22
 8004d10:	f040 80ab 	bne.w	8004e6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1c:	d117      	bne.n	8004d4e <UART_Receive_IT+0x50>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d113      	bne.n	8004d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	1c9a      	adds	r2, r3, #2
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d4c:	e026      	b.n	8004d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d60:	d007      	beq.n	8004d72 <UART_Receive_IT+0x74>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <UART_Receive_IT+0x82>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e008      	b.n	8004d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4619      	mov	r1, r3
 8004daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d15a      	bne.n	8004e66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0220 	bic.w	r2, r2, #32
 8004dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d135      	bne.n	8004e5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	613b      	str	r3, [r7, #16]
   return(result);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f023 0310 	bic.w	r3, r3, #16
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e16:	623a      	str	r2, [r7, #32]
 8004e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	69f9      	ldr	r1, [r7, #28]
 8004e1c:	6a3a      	ldr	r2, [r7, #32]
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e5      	bne.n	8004df6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d10a      	bne.n	8004e4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff fdbb 	bl	80049d0 <HAL_UARTEx_RxEventCallback>
 8004e5a:	e002      	b.n	8004e62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fb fe97 	bl	8000b90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e002      	b.n	8004e6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3730      	adds	r7, #48	; 0x30
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e78:	b0c0      	sub	sp, #256	; 0x100
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	68d9      	ldr	r1, [r3, #12]
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	ea40 0301 	orr.w	r3, r0, r1
 8004e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ecc:	f021 010c 	bic.w	r1, r1, #12
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eda:	430b      	orrs	r3, r1
 8004edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	6999      	ldr	r1, [r3, #24]
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	ea40 0301 	orr.w	r3, r0, r1
 8004efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b8f      	ldr	r3, [pc, #572]	; (8005140 <UART_SetConfig+0x2cc>)
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d005      	beq.n	8004f14 <UART_SetConfig+0xa0>
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b8d      	ldr	r3, [pc, #564]	; (8005144 <UART_SetConfig+0x2d0>)
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d104      	bne.n	8004f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7fe fa64 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8004f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f1c:	e003      	b.n	8004f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f1e:	f7fe fa4b 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8004f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	f040 810c 	bne.w	800514c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f46:	4622      	mov	r2, r4
 8004f48:	462b      	mov	r3, r5
 8004f4a:	1891      	adds	r1, r2, r2
 8004f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f4e:	415b      	adcs	r3, r3
 8004f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f56:	4621      	mov	r1, r4
 8004f58:	eb12 0801 	adds.w	r8, r2, r1
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	eb43 0901 	adc.w	r9, r3, r1
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f76:	4690      	mov	r8, r2
 8004f78:	4699      	mov	r9, r3
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	eb18 0303 	adds.w	r3, r8, r3
 8004f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f84:	462b      	mov	r3, r5
 8004f86:	eb49 0303 	adc.w	r3, r9, r3
 8004f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	18db      	adds	r3, r3, r3
 8004fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa8:	4613      	mov	r3, r2
 8004faa:	eb42 0303 	adc.w	r3, r2, r3
 8004fae:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fb8:	f7fb f972 	bl	80002a0 <__aeabi_uldivmod>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <UART_SetConfig+0x2d4>)
 8004fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	011c      	lsls	r4, r3, #4
 8004fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fec:	4641      	mov	r1, r8
 8004fee:	eb12 0a01 	adds.w	sl, r2, r1
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800500c:	4692      	mov	sl, r2
 800500e:	469b      	mov	fp, r3
 8005010:	4643      	mov	r3, r8
 8005012:	eb1a 0303 	adds.w	r3, sl, r3
 8005016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800501a:	464b      	mov	r3, r9
 800501c:	eb4b 0303 	adc.w	r3, fp, r3
 8005020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005038:	460b      	mov	r3, r1
 800503a:	18db      	adds	r3, r3, r3
 800503c:	643b      	str	r3, [r7, #64]	; 0x40
 800503e:	4613      	mov	r3, r2
 8005040:	eb42 0303 	adc.w	r3, r2, r3
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
 8005046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800504a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800504e:	f7fb f927 	bl	80002a0 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4611      	mov	r1, r2
 8005058:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <UART_SetConfig+0x2d4>)
 800505a:	fba3 2301 	umull	r2, r3, r3, r1
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2264      	movs	r2, #100	; 0x64
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	1acb      	subs	r3, r1, r3
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <UART_SetConfig+0x2d4>)
 8005070:	fba3 2302 	umull	r2, r3, r3, r2
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800507c:	441c      	add	r4, r3
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800508c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	1891      	adds	r1, r2, r2
 8005096:	63b9      	str	r1, [r7, #56]	; 0x38
 8005098:	415b      	adcs	r3, r3
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050a0:	4641      	mov	r1, r8
 80050a2:	1851      	adds	r1, r2, r1
 80050a4:	6339      	str	r1, [r7, #48]	; 0x30
 80050a6:	4649      	mov	r1, r9
 80050a8:	414b      	adcs	r3, r1
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050b8:	4659      	mov	r1, fp
 80050ba:	00cb      	lsls	r3, r1, #3
 80050bc:	4651      	mov	r1, sl
 80050be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050c2:	4651      	mov	r1, sl
 80050c4:	00ca      	lsls	r2, r1, #3
 80050c6:	4610      	mov	r0, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	4642      	mov	r2, r8
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050d4:	464b      	mov	r3, r9
 80050d6:	460a      	mov	r2, r1
 80050d8:	eb42 0303 	adc.w	r3, r2, r3
 80050dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050f4:	460b      	mov	r3, r1
 80050f6:	18db      	adds	r3, r3, r3
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fa:	4613      	mov	r3, r2
 80050fc:	eb42 0303 	adc.w	r3, r2, r3
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800510a:	f7fb f8c9 	bl	80002a0 <__aeabi_uldivmod>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <UART_SetConfig+0x2d4>)
 8005114:	fba3 1302 	umull	r1, r3, r3, r2
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	2164      	movs	r1, #100	; 0x64
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	3332      	adds	r3, #50	; 0x32
 8005126:	4a08      	ldr	r2, [pc, #32]	; (8005148 <UART_SetConfig+0x2d4>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	f003 0207 	and.w	r2, r3, #7
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4422      	add	r2, r4
 800513a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800513c:	e105      	b.n	800534a <UART_SetConfig+0x4d6>
 800513e:	bf00      	nop
 8005140:	40011000 	.word	0x40011000
 8005144:	40011400 	.word	0x40011400
 8005148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800514c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005150:	2200      	movs	r2, #0
 8005152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800515a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800515e:	4642      	mov	r2, r8
 8005160:	464b      	mov	r3, r9
 8005162:	1891      	adds	r1, r2, r2
 8005164:	6239      	str	r1, [r7, #32]
 8005166:	415b      	adcs	r3, r3
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800516e:	4641      	mov	r1, r8
 8005170:	1854      	adds	r4, r2, r1
 8005172:	4649      	mov	r1, r9
 8005174:	eb43 0501 	adc.w	r5, r3, r1
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	00eb      	lsls	r3, r5, #3
 8005182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005186:	00e2      	lsls	r2, r4, #3
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	4643      	mov	r3, r8
 800518e:	18e3      	adds	r3, r4, r3
 8005190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005194:	464b      	mov	r3, r9
 8005196:	eb45 0303 	adc.w	r3, r5, r3
 800519a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051ba:	4629      	mov	r1, r5
 80051bc:	008b      	lsls	r3, r1, #2
 80051be:	4621      	mov	r1, r4
 80051c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c4:	4621      	mov	r1, r4
 80051c6:	008a      	lsls	r2, r1, #2
 80051c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051cc:	f7fb f868 	bl	80002a0 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4b60      	ldr	r3, [pc, #384]	; (8005358 <UART_SetConfig+0x4e4>)
 80051d6:	fba3 2302 	umull	r2, r3, r3, r2
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	011c      	lsls	r4, r3, #4
 80051de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051f0:	4642      	mov	r2, r8
 80051f2:	464b      	mov	r3, r9
 80051f4:	1891      	adds	r1, r2, r2
 80051f6:	61b9      	str	r1, [r7, #24]
 80051f8:	415b      	adcs	r3, r3
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005200:	4641      	mov	r1, r8
 8005202:	1851      	adds	r1, r2, r1
 8005204:	6139      	str	r1, [r7, #16]
 8005206:	4649      	mov	r1, r9
 8005208:	414b      	adcs	r3, r1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005218:	4659      	mov	r1, fp
 800521a:	00cb      	lsls	r3, r1, #3
 800521c:	4651      	mov	r1, sl
 800521e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005222:	4651      	mov	r1, sl
 8005224:	00ca      	lsls	r2, r1, #3
 8005226:	4610      	mov	r0, r2
 8005228:	4619      	mov	r1, r3
 800522a:	4603      	mov	r3, r0
 800522c:	4642      	mov	r2, r8
 800522e:	189b      	adds	r3, r3, r2
 8005230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005234:	464b      	mov	r3, r9
 8005236:	460a      	mov	r2, r1
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	67bb      	str	r3, [r7, #120]	; 0x78
 800524a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005258:	4649      	mov	r1, r9
 800525a:	008b      	lsls	r3, r1, #2
 800525c:	4641      	mov	r1, r8
 800525e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005262:	4641      	mov	r1, r8
 8005264:	008a      	lsls	r2, r1, #2
 8005266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800526a:	f7fb f819 	bl	80002a0 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4b39      	ldr	r3, [pc, #228]	; (8005358 <UART_SetConfig+0x4e4>)
 8005274:	fba3 1302 	umull	r1, r3, r3, r2
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	2164      	movs	r1, #100	; 0x64
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	3332      	adds	r3, #50	; 0x32
 8005286:	4a34      	ldr	r2, [pc, #208]	; (8005358 <UART_SetConfig+0x4e4>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005292:	441c      	add	r4, r3
 8005294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005298:	2200      	movs	r2, #0
 800529a:	673b      	str	r3, [r7, #112]	; 0x70
 800529c:	677a      	str	r2, [r7, #116]	; 0x74
 800529e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052a2:	4642      	mov	r2, r8
 80052a4:	464b      	mov	r3, r9
 80052a6:	1891      	adds	r1, r2, r2
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	415b      	adcs	r3, r3
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b2:	4641      	mov	r1, r8
 80052b4:	1851      	adds	r1, r2, r1
 80052b6:	6039      	str	r1, [r7, #0]
 80052b8:	4649      	mov	r1, r9
 80052ba:	414b      	adcs	r3, r1
 80052bc:	607b      	str	r3, [r7, #4]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052ca:	4659      	mov	r1, fp
 80052cc:	00cb      	lsls	r3, r1, #3
 80052ce:	4651      	mov	r1, sl
 80052d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d4:	4651      	mov	r1, sl
 80052d6:	00ca      	lsls	r2, r1, #3
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	4603      	mov	r3, r0
 80052de:	4642      	mov	r2, r8
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e4:	464b      	mov	r3, r9
 80052e6:	460a      	mov	r2, r1
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	663b      	str	r3, [r7, #96]	; 0x60
 80052f8:	667a      	str	r2, [r7, #100]	; 0x64
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005306:	4649      	mov	r1, r9
 8005308:	008b      	lsls	r3, r1, #2
 800530a:	4641      	mov	r1, r8
 800530c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005310:	4641      	mov	r1, r8
 8005312:	008a      	lsls	r2, r1, #2
 8005314:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005318:	f7fa ffc2 	bl	80002a0 <__aeabi_uldivmod>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <UART_SetConfig+0x4e4>)
 8005322:	fba3 1302 	umull	r1, r3, r3, r2
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	2164      	movs	r1, #100	; 0x64
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	3332      	adds	r3, #50	; 0x32
 8005334:	4a08      	ldr	r2, [pc, #32]	; (8005358 <UART_SetConfig+0x4e4>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4422      	add	r2, r4
 8005348:	609a      	str	r2, [r3, #8]
}
 800534a:	bf00      	nop
 800534c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	51eb851f 	.word	0x51eb851f

0800535c <__errno>:
 800535c:	4b01      	ldr	r3, [pc, #4]	; (8005364 <__errno+0x8>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000404 	.word	0x20000404

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4d0d      	ldr	r5, [pc, #52]	; (80053a0 <__libc_init_array+0x38>)
 800536c:	4c0d      	ldr	r4, [pc, #52]	; (80053a4 <__libc_init_array+0x3c>)
 800536e:	1b64      	subs	r4, r4, r5
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	2600      	movs	r6, #0
 8005374:	42a6      	cmp	r6, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	4d0b      	ldr	r5, [pc, #44]	; (80053a8 <__libc_init_array+0x40>)
 800537a:	4c0c      	ldr	r4, [pc, #48]	; (80053ac <__libc_init_array+0x44>)
 800537c:	f000 fd76 	bl	8005e6c <_init>
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	2600      	movs	r6, #0
 8005386:	42a6      	cmp	r6, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005390:	4798      	blx	r3
 8005392:	3601      	adds	r6, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f855 3b04 	ldr.w	r3, [r5], #4
 800539a:	4798      	blx	r3
 800539c:	3601      	adds	r6, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	0800617c 	.word	0x0800617c
 80053a4:	0800617c 	.word	0x0800617c
 80053a8:	0800617c 	.word	0x0800617c
 80053ac:	08006180 	.word	0x08006180

080053b0 <malloc>:
 80053b0:	4b02      	ldr	r3, [pc, #8]	; (80053bc <malloc+0xc>)
 80053b2:	4601      	mov	r1, r0
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	f000 b88d 	b.w	80054d4 <_malloc_r>
 80053ba:	bf00      	nop
 80053bc:	20000404 	.word	0x20000404

080053c0 <free>:
 80053c0:	4b02      	ldr	r3, [pc, #8]	; (80053cc <free+0xc>)
 80053c2:	4601      	mov	r1, r0
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f000 b819 	b.w	80053fc <_free_r>
 80053ca:	bf00      	nop
 80053cc:	20000404 	.word	0x20000404

080053d0 <memcpy>:
 80053d0:	440a      	add	r2, r1
 80053d2:	4291      	cmp	r1, r2
 80053d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d8:	d100      	bne.n	80053dc <memcpy+0xc>
 80053da:	4770      	bx	lr
 80053dc:	b510      	push	{r4, lr}
 80053de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e6:	4291      	cmp	r1, r2
 80053e8:	d1f9      	bne.n	80053de <memcpy+0xe>
 80053ea:	bd10      	pop	{r4, pc}

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <_free_r>:
 80053fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053fe:	2900      	cmp	r1, #0
 8005400:	d044      	beq.n	800548c <_free_r+0x90>
 8005402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005406:	9001      	str	r0, [sp, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f1a1 0404 	sub.w	r4, r1, #4
 800540e:	bfb8      	it	lt
 8005410:	18e4      	addlt	r4, r4, r3
 8005412:	f000 f9db 	bl	80057cc <__malloc_lock>
 8005416:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <_free_r+0x94>)
 8005418:	9801      	ldr	r0, [sp, #4]
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	b933      	cbnz	r3, 800542c <_free_r+0x30>
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	6014      	str	r4, [r2, #0]
 8005422:	b003      	add	sp, #12
 8005424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005428:	f000 b9d6 	b.w	80057d8 <__malloc_unlock>
 800542c:	42a3      	cmp	r3, r4
 800542e:	d908      	bls.n	8005442 <_free_r+0x46>
 8005430:	6825      	ldr	r5, [r4, #0]
 8005432:	1961      	adds	r1, r4, r5
 8005434:	428b      	cmp	r3, r1
 8005436:	bf01      	itttt	eq
 8005438:	6819      	ldreq	r1, [r3, #0]
 800543a:	685b      	ldreq	r3, [r3, #4]
 800543c:	1949      	addeq	r1, r1, r5
 800543e:	6021      	streq	r1, [r4, #0]
 8005440:	e7ed      	b.n	800541e <_free_r+0x22>
 8005442:	461a      	mov	r2, r3
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	b10b      	cbz	r3, 800544c <_free_r+0x50>
 8005448:	42a3      	cmp	r3, r4
 800544a:	d9fa      	bls.n	8005442 <_free_r+0x46>
 800544c:	6811      	ldr	r1, [r2, #0]
 800544e:	1855      	adds	r5, r2, r1
 8005450:	42a5      	cmp	r5, r4
 8005452:	d10b      	bne.n	800546c <_free_r+0x70>
 8005454:	6824      	ldr	r4, [r4, #0]
 8005456:	4421      	add	r1, r4
 8005458:	1854      	adds	r4, r2, r1
 800545a:	42a3      	cmp	r3, r4
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	d1e0      	bne.n	8005422 <_free_r+0x26>
 8005460:	681c      	ldr	r4, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	6053      	str	r3, [r2, #4]
 8005466:	4421      	add	r1, r4
 8005468:	6011      	str	r1, [r2, #0]
 800546a:	e7da      	b.n	8005422 <_free_r+0x26>
 800546c:	d902      	bls.n	8005474 <_free_r+0x78>
 800546e:	230c      	movs	r3, #12
 8005470:	6003      	str	r3, [r0, #0]
 8005472:	e7d6      	b.n	8005422 <_free_r+0x26>
 8005474:	6825      	ldr	r5, [r4, #0]
 8005476:	1961      	adds	r1, r4, r5
 8005478:	428b      	cmp	r3, r1
 800547a:	bf04      	itt	eq
 800547c:	6819      	ldreq	r1, [r3, #0]
 800547e:	685b      	ldreq	r3, [r3, #4]
 8005480:	6063      	str	r3, [r4, #4]
 8005482:	bf04      	itt	eq
 8005484:	1949      	addeq	r1, r1, r5
 8005486:	6021      	streq	r1, [r4, #0]
 8005488:	6054      	str	r4, [r2, #4]
 800548a:	e7ca      	b.n	8005422 <_free_r+0x26>
 800548c:	b003      	add	sp, #12
 800548e:	bd30      	pop	{r4, r5, pc}
 8005490:	20000648 	.word	0x20000648

08005494 <sbrk_aligned>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	4e0e      	ldr	r6, [pc, #56]	; (80054d0 <sbrk_aligned+0x3c>)
 8005498:	460c      	mov	r4, r1
 800549a:	6831      	ldr	r1, [r6, #0]
 800549c:	4605      	mov	r5, r0
 800549e:	b911      	cbnz	r1, 80054a6 <sbrk_aligned+0x12>
 80054a0:	f000 f88c 	bl	80055bc <_sbrk_r>
 80054a4:	6030      	str	r0, [r6, #0]
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 f887 	bl	80055bc <_sbrk_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d00a      	beq.n	80054c8 <sbrk_aligned+0x34>
 80054b2:	1cc4      	adds	r4, r0, #3
 80054b4:	f024 0403 	bic.w	r4, r4, #3
 80054b8:	42a0      	cmp	r0, r4
 80054ba:	d007      	beq.n	80054cc <sbrk_aligned+0x38>
 80054bc:	1a21      	subs	r1, r4, r0
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f87c 	bl	80055bc <_sbrk_r>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d101      	bne.n	80054cc <sbrk_aligned+0x38>
 80054c8:	f04f 34ff 	mov.w	r4, #4294967295
 80054cc:	4620      	mov	r0, r4
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	2000064c 	.word	0x2000064c

080054d4 <_malloc_r>:
 80054d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d8:	1ccd      	adds	r5, r1, #3
 80054da:	f025 0503 	bic.w	r5, r5, #3
 80054de:	3508      	adds	r5, #8
 80054e0:	2d0c      	cmp	r5, #12
 80054e2:	bf38      	it	cc
 80054e4:	250c      	movcc	r5, #12
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	4607      	mov	r7, r0
 80054ea:	db01      	blt.n	80054f0 <_malloc_r+0x1c>
 80054ec:	42a9      	cmp	r1, r5
 80054ee:	d905      	bls.n	80054fc <_malloc_r+0x28>
 80054f0:	230c      	movs	r3, #12
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	2600      	movs	r6, #0
 80054f6:	4630      	mov	r0, r6
 80054f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054fc:	4e2e      	ldr	r6, [pc, #184]	; (80055b8 <_malloc_r+0xe4>)
 80054fe:	f000 f965 	bl	80057cc <__malloc_lock>
 8005502:	6833      	ldr	r3, [r6, #0]
 8005504:	461c      	mov	r4, r3
 8005506:	bb34      	cbnz	r4, 8005556 <_malloc_r+0x82>
 8005508:	4629      	mov	r1, r5
 800550a:	4638      	mov	r0, r7
 800550c:	f7ff ffc2 	bl	8005494 <sbrk_aligned>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	4604      	mov	r4, r0
 8005514:	d14d      	bne.n	80055b2 <_malloc_r+0xde>
 8005516:	6834      	ldr	r4, [r6, #0]
 8005518:	4626      	mov	r6, r4
 800551a:	2e00      	cmp	r6, #0
 800551c:	d140      	bne.n	80055a0 <_malloc_r+0xcc>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	4631      	mov	r1, r6
 8005522:	4638      	mov	r0, r7
 8005524:	eb04 0803 	add.w	r8, r4, r3
 8005528:	f000 f848 	bl	80055bc <_sbrk_r>
 800552c:	4580      	cmp	r8, r0
 800552e:	d13a      	bne.n	80055a6 <_malloc_r+0xd2>
 8005530:	6821      	ldr	r1, [r4, #0]
 8005532:	3503      	adds	r5, #3
 8005534:	1a6d      	subs	r5, r5, r1
 8005536:	f025 0503 	bic.w	r5, r5, #3
 800553a:	3508      	adds	r5, #8
 800553c:	2d0c      	cmp	r5, #12
 800553e:	bf38      	it	cc
 8005540:	250c      	movcc	r5, #12
 8005542:	4629      	mov	r1, r5
 8005544:	4638      	mov	r0, r7
 8005546:	f7ff ffa5 	bl	8005494 <sbrk_aligned>
 800554a:	3001      	adds	r0, #1
 800554c:	d02b      	beq.n	80055a6 <_malloc_r+0xd2>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	442b      	add	r3, r5
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	e00e      	b.n	8005574 <_malloc_r+0xa0>
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	1b52      	subs	r2, r2, r5
 800555a:	d41e      	bmi.n	800559a <_malloc_r+0xc6>
 800555c:	2a0b      	cmp	r2, #11
 800555e:	d916      	bls.n	800558e <_malloc_r+0xba>
 8005560:	1961      	adds	r1, r4, r5
 8005562:	42a3      	cmp	r3, r4
 8005564:	6025      	str	r5, [r4, #0]
 8005566:	bf18      	it	ne
 8005568:	6059      	strne	r1, [r3, #4]
 800556a:	6863      	ldr	r3, [r4, #4]
 800556c:	bf08      	it	eq
 800556e:	6031      	streq	r1, [r6, #0]
 8005570:	5162      	str	r2, [r4, r5]
 8005572:	604b      	str	r3, [r1, #4]
 8005574:	4638      	mov	r0, r7
 8005576:	f104 060b 	add.w	r6, r4, #11
 800557a:	f000 f92d 	bl	80057d8 <__malloc_unlock>
 800557e:	f026 0607 	bic.w	r6, r6, #7
 8005582:	1d23      	adds	r3, r4, #4
 8005584:	1af2      	subs	r2, r6, r3
 8005586:	d0b6      	beq.n	80054f6 <_malloc_r+0x22>
 8005588:	1b9b      	subs	r3, r3, r6
 800558a:	50a3      	str	r3, [r4, r2]
 800558c:	e7b3      	b.n	80054f6 <_malloc_r+0x22>
 800558e:	6862      	ldr	r2, [r4, #4]
 8005590:	42a3      	cmp	r3, r4
 8005592:	bf0c      	ite	eq
 8005594:	6032      	streq	r2, [r6, #0]
 8005596:	605a      	strne	r2, [r3, #4]
 8005598:	e7ec      	b.n	8005574 <_malloc_r+0xa0>
 800559a:	4623      	mov	r3, r4
 800559c:	6864      	ldr	r4, [r4, #4]
 800559e:	e7b2      	b.n	8005506 <_malloc_r+0x32>
 80055a0:	4634      	mov	r4, r6
 80055a2:	6876      	ldr	r6, [r6, #4]
 80055a4:	e7b9      	b.n	800551a <_malloc_r+0x46>
 80055a6:	230c      	movs	r3, #12
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	4638      	mov	r0, r7
 80055ac:	f000 f914 	bl	80057d8 <__malloc_unlock>
 80055b0:	e7a1      	b.n	80054f6 <_malloc_r+0x22>
 80055b2:	6025      	str	r5, [r4, #0]
 80055b4:	e7de      	b.n	8005574 <_malloc_r+0xa0>
 80055b6:	bf00      	nop
 80055b8:	20000648 	.word	0x20000648

080055bc <_sbrk_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d06      	ldr	r5, [pc, #24]	; (80055d8 <_sbrk_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fc fdf2 	bl	80021b0 <_sbrk>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_sbrk_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_sbrk_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	20000650 	.word	0x20000650

080055dc <sniprintf>:
 80055dc:	b40c      	push	{r2, r3}
 80055de:	b530      	push	{r4, r5, lr}
 80055e0:	4b17      	ldr	r3, [pc, #92]	; (8005640 <sniprintf+0x64>)
 80055e2:	1e0c      	subs	r4, r1, #0
 80055e4:	681d      	ldr	r5, [r3, #0]
 80055e6:	b09d      	sub	sp, #116	; 0x74
 80055e8:	da08      	bge.n	80055fc <sniprintf+0x20>
 80055ea:	238b      	movs	r3, #139	; 0x8b
 80055ec:	602b      	str	r3, [r5, #0]
 80055ee:	f04f 30ff 	mov.w	r0, #4294967295
 80055f2:	b01d      	add	sp, #116	; 0x74
 80055f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f8:	b002      	add	sp, #8
 80055fa:	4770      	bx	lr
 80055fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005600:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005604:	bf14      	ite	ne
 8005606:	f104 33ff 	addne.w	r3, r4, #4294967295
 800560a:	4623      	moveq	r3, r4
 800560c:	9304      	str	r3, [sp, #16]
 800560e:	9307      	str	r3, [sp, #28]
 8005610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005614:	9002      	str	r0, [sp, #8]
 8005616:	9006      	str	r0, [sp, #24]
 8005618:	f8ad 3016 	strh.w	r3, [sp, #22]
 800561c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800561e:	ab21      	add	r3, sp, #132	; 0x84
 8005620:	a902      	add	r1, sp, #8
 8005622:	4628      	mov	r0, r5
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	f000 f939 	bl	800589c <_svfiprintf_r>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	bfbc      	itt	lt
 800562e:	238b      	movlt	r3, #139	; 0x8b
 8005630:	602b      	strlt	r3, [r5, #0]
 8005632:	2c00      	cmp	r4, #0
 8005634:	d0dd      	beq.n	80055f2 <sniprintf+0x16>
 8005636:	9b02      	ldr	r3, [sp, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e7d9      	b.n	80055f2 <sniprintf+0x16>
 800563e:	bf00      	nop
 8005640:	20000404 	.word	0x20000404

08005644 <siprintf>:
 8005644:	b40e      	push	{r1, r2, r3}
 8005646:	b500      	push	{lr}
 8005648:	b09c      	sub	sp, #112	; 0x70
 800564a:	ab1d      	add	r3, sp, #116	; 0x74
 800564c:	9002      	str	r0, [sp, #8]
 800564e:	9006      	str	r0, [sp, #24]
 8005650:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005654:	4809      	ldr	r0, [pc, #36]	; (800567c <siprintf+0x38>)
 8005656:	9107      	str	r1, [sp, #28]
 8005658:	9104      	str	r1, [sp, #16]
 800565a:	4909      	ldr	r1, [pc, #36]	; (8005680 <siprintf+0x3c>)
 800565c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005660:	9105      	str	r1, [sp, #20]
 8005662:	6800      	ldr	r0, [r0, #0]
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	a902      	add	r1, sp, #8
 8005668:	f000 f918 	bl	800589c <_svfiprintf_r>
 800566c:	9b02      	ldr	r3, [sp, #8]
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	b01c      	add	sp, #112	; 0x70
 8005674:	f85d eb04 	ldr.w	lr, [sp], #4
 8005678:	b003      	add	sp, #12
 800567a:	4770      	bx	lr
 800567c:	20000404 	.word	0x20000404
 8005680:	ffff0208 	.word	0xffff0208

08005684 <strcat>:
 8005684:	b510      	push	{r4, lr}
 8005686:	4602      	mov	r2, r0
 8005688:	7814      	ldrb	r4, [r2, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	3201      	adds	r2, #1
 800568e:	2c00      	cmp	r4, #0
 8005690:	d1fa      	bne.n	8005688 <strcat+0x4>
 8005692:	3b01      	subs	r3, #1
 8005694:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005698:	f803 2f01 	strb.w	r2, [r3, #1]!
 800569c:	2a00      	cmp	r2, #0
 800569e:	d1f9      	bne.n	8005694 <strcat+0x10>
 80056a0:	bd10      	pop	{r4, pc}

080056a2 <strcpy>:
 80056a2:	4603      	mov	r3, r0
 80056a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056a8:	f803 2b01 	strb.w	r2, [r3], #1
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	d1f9      	bne.n	80056a4 <strcpy+0x2>
 80056b0:	4770      	bx	lr
	...

080056b4 <_strtol_l.constprop.0>:
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ba:	d001      	beq.n	80056c0 <_strtol_l.constprop.0+0xc>
 80056bc:	2b24      	cmp	r3, #36	; 0x24
 80056be:	d906      	bls.n	80056ce <_strtol_l.constprop.0+0x1a>
 80056c0:	f7ff fe4c 	bl	800535c <__errno>
 80056c4:	2316      	movs	r3, #22
 80056c6:	6003      	str	r3, [r0, #0]
 80056c8:	2000      	movs	r0, #0
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80057b4 <_strtol_l.constprop.0+0x100>
 80056d2:	460d      	mov	r5, r1
 80056d4:	462e      	mov	r6, r5
 80056d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056da:	f814 700c 	ldrb.w	r7, [r4, ip]
 80056de:	f017 0708 	ands.w	r7, r7, #8
 80056e2:	d1f7      	bne.n	80056d4 <_strtol_l.constprop.0+0x20>
 80056e4:	2c2d      	cmp	r4, #45	; 0x2d
 80056e6:	d132      	bne.n	800574e <_strtol_l.constprop.0+0x9a>
 80056e8:	782c      	ldrb	r4, [r5, #0]
 80056ea:	2701      	movs	r7, #1
 80056ec:	1cb5      	adds	r5, r6, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d05b      	beq.n	80057aa <_strtol_l.constprop.0+0xf6>
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d109      	bne.n	800570a <_strtol_l.constprop.0+0x56>
 80056f6:	2c30      	cmp	r4, #48	; 0x30
 80056f8:	d107      	bne.n	800570a <_strtol_l.constprop.0+0x56>
 80056fa:	782c      	ldrb	r4, [r5, #0]
 80056fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005700:	2c58      	cmp	r4, #88	; 0x58
 8005702:	d14d      	bne.n	80057a0 <_strtol_l.constprop.0+0xec>
 8005704:	786c      	ldrb	r4, [r5, #1]
 8005706:	2310      	movs	r3, #16
 8005708:	3502      	adds	r5, #2
 800570a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800570e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005712:	f04f 0c00 	mov.w	ip, #0
 8005716:	fbb8 f9f3 	udiv	r9, r8, r3
 800571a:	4666      	mov	r6, ip
 800571c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005720:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005724:	f1be 0f09 	cmp.w	lr, #9
 8005728:	d816      	bhi.n	8005758 <_strtol_l.constprop.0+0xa4>
 800572a:	4674      	mov	r4, lr
 800572c:	42a3      	cmp	r3, r4
 800572e:	dd24      	ble.n	800577a <_strtol_l.constprop.0+0xc6>
 8005730:	f1bc 0f00 	cmp.w	ip, #0
 8005734:	db1e      	blt.n	8005774 <_strtol_l.constprop.0+0xc0>
 8005736:	45b1      	cmp	r9, r6
 8005738:	d31c      	bcc.n	8005774 <_strtol_l.constprop.0+0xc0>
 800573a:	d101      	bne.n	8005740 <_strtol_l.constprop.0+0x8c>
 800573c:	45a2      	cmp	sl, r4
 800573e:	db19      	blt.n	8005774 <_strtol_l.constprop.0+0xc0>
 8005740:	fb06 4603 	mla	r6, r6, r3, r4
 8005744:	f04f 0c01 	mov.w	ip, #1
 8005748:	f815 4b01 	ldrb.w	r4, [r5], #1
 800574c:	e7e8      	b.n	8005720 <_strtol_l.constprop.0+0x6c>
 800574e:	2c2b      	cmp	r4, #43	; 0x2b
 8005750:	bf04      	itt	eq
 8005752:	782c      	ldrbeq	r4, [r5, #0]
 8005754:	1cb5      	addeq	r5, r6, #2
 8005756:	e7ca      	b.n	80056ee <_strtol_l.constprop.0+0x3a>
 8005758:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800575c:	f1be 0f19 	cmp.w	lr, #25
 8005760:	d801      	bhi.n	8005766 <_strtol_l.constprop.0+0xb2>
 8005762:	3c37      	subs	r4, #55	; 0x37
 8005764:	e7e2      	b.n	800572c <_strtol_l.constprop.0+0x78>
 8005766:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800576a:	f1be 0f19 	cmp.w	lr, #25
 800576e:	d804      	bhi.n	800577a <_strtol_l.constprop.0+0xc6>
 8005770:	3c57      	subs	r4, #87	; 0x57
 8005772:	e7db      	b.n	800572c <_strtol_l.constprop.0+0x78>
 8005774:	f04f 3cff 	mov.w	ip, #4294967295
 8005778:	e7e6      	b.n	8005748 <_strtol_l.constprop.0+0x94>
 800577a:	f1bc 0f00 	cmp.w	ip, #0
 800577e:	da05      	bge.n	800578c <_strtol_l.constprop.0+0xd8>
 8005780:	2322      	movs	r3, #34	; 0x22
 8005782:	6003      	str	r3, [r0, #0]
 8005784:	4646      	mov	r6, r8
 8005786:	b942      	cbnz	r2, 800579a <_strtol_l.constprop.0+0xe6>
 8005788:	4630      	mov	r0, r6
 800578a:	e79e      	b.n	80056ca <_strtol_l.constprop.0+0x16>
 800578c:	b107      	cbz	r7, 8005790 <_strtol_l.constprop.0+0xdc>
 800578e:	4276      	negs	r6, r6
 8005790:	2a00      	cmp	r2, #0
 8005792:	d0f9      	beq.n	8005788 <_strtol_l.constprop.0+0xd4>
 8005794:	f1bc 0f00 	cmp.w	ip, #0
 8005798:	d000      	beq.n	800579c <_strtol_l.constprop.0+0xe8>
 800579a:	1e69      	subs	r1, r5, #1
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	e7f3      	b.n	8005788 <_strtol_l.constprop.0+0xd4>
 80057a0:	2430      	movs	r4, #48	; 0x30
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1b1      	bne.n	800570a <_strtol_l.constprop.0+0x56>
 80057a6:	2308      	movs	r3, #8
 80057a8:	e7af      	b.n	800570a <_strtol_l.constprop.0+0x56>
 80057aa:	2c30      	cmp	r4, #48	; 0x30
 80057ac:	d0a5      	beq.n	80056fa <_strtol_l.constprop.0+0x46>
 80057ae:	230a      	movs	r3, #10
 80057b0:	e7ab      	b.n	800570a <_strtol_l.constprop.0+0x56>
 80057b2:	bf00      	nop
 80057b4:	08006041 	.word	0x08006041

080057b8 <strtol>:
 80057b8:	4613      	mov	r3, r2
 80057ba:	460a      	mov	r2, r1
 80057bc:	4601      	mov	r1, r0
 80057be:	4802      	ldr	r0, [pc, #8]	; (80057c8 <strtol+0x10>)
 80057c0:	6800      	ldr	r0, [r0, #0]
 80057c2:	f7ff bf77 	b.w	80056b4 <_strtol_l.constprop.0>
 80057c6:	bf00      	nop
 80057c8:	20000404 	.word	0x20000404

080057cc <__malloc_lock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__malloc_lock+0x8>)
 80057ce:	f000 baf9 	b.w	8005dc4 <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	20000654 	.word	0x20000654

080057d8 <__malloc_unlock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_unlock+0x8>)
 80057da:	f000 baf4 	b.w	8005dc6 <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	20000654 	.word	0x20000654

080057e4 <__ssputs_r>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	688e      	ldr	r6, [r1, #8]
 80057ea:	429e      	cmp	r6, r3
 80057ec:	4682      	mov	sl, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	4690      	mov	r8, r2
 80057f2:	461f      	mov	r7, r3
 80057f4:	d838      	bhi.n	8005868 <__ssputs_r+0x84>
 80057f6:	898a      	ldrh	r2, [r1, #12]
 80057f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057fc:	d032      	beq.n	8005864 <__ssputs_r+0x80>
 80057fe:	6825      	ldr	r5, [r4, #0]
 8005800:	6909      	ldr	r1, [r1, #16]
 8005802:	eba5 0901 	sub.w	r9, r5, r1
 8005806:	6965      	ldr	r5, [r4, #20]
 8005808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800580c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005810:	3301      	adds	r3, #1
 8005812:	444b      	add	r3, r9
 8005814:	106d      	asrs	r5, r5, #1
 8005816:	429d      	cmp	r5, r3
 8005818:	bf38      	it	cc
 800581a:	461d      	movcc	r5, r3
 800581c:	0553      	lsls	r3, r2, #21
 800581e:	d531      	bpl.n	8005884 <__ssputs_r+0xa0>
 8005820:	4629      	mov	r1, r5
 8005822:	f7ff fe57 	bl	80054d4 <_malloc_r>
 8005826:	4606      	mov	r6, r0
 8005828:	b950      	cbnz	r0, 8005840 <__ssputs_r+0x5c>
 800582a:	230c      	movs	r3, #12
 800582c:	f8ca 3000 	str.w	r3, [sl]
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005840:	6921      	ldr	r1, [r4, #16]
 8005842:	464a      	mov	r2, r9
 8005844:	f7ff fdc4 	bl	80053d0 <memcpy>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	6126      	str	r6, [r4, #16]
 8005856:	6165      	str	r5, [r4, #20]
 8005858:	444e      	add	r6, r9
 800585a:	eba5 0509 	sub.w	r5, r5, r9
 800585e:	6026      	str	r6, [r4, #0]
 8005860:	60a5      	str	r5, [r4, #8]
 8005862:	463e      	mov	r6, r7
 8005864:	42be      	cmp	r6, r7
 8005866:	d900      	bls.n	800586a <__ssputs_r+0x86>
 8005868:	463e      	mov	r6, r7
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	4632      	mov	r2, r6
 800586e:	4641      	mov	r1, r8
 8005870:	f000 faaa 	bl	8005dc8 <memmove>
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	1b9b      	subs	r3, r3, r6
 8005878:	60a3      	str	r3, [r4, #8]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	4433      	add	r3, r6
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	2000      	movs	r0, #0
 8005882:	e7db      	b.n	800583c <__ssputs_r+0x58>
 8005884:	462a      	mov	r2, r5
 8005886:	f000 fab9 	bl	8005dfc <_realloc_r>
 800588a:	4606      	mov	r6, r0
 800588c:	2800      	cmp	r0, #0
 800588e:	d1e1      	bne.n	8005854 <__ssputs_r+0x70>
 8005890:	6921      	ldr	r1, [r4, #16]
 8005892:	4650      	mov	r0, sl
 8005894:	f7ff fdb2 	bl	80053fc <_free_r>
 8005898:	e7c7      	b.n	800582a <__ssputs_r+0x46>
	...

0800589c <_svfiprintf_r>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	4698      	mov	r8, r3
 80058a2:	898b      	ldrh	r3, [r1, #12]
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	b09d      	sub	sp, #116	; 0x74
 80058a8:	4607      	mov	r7, r0
 80058aa:	460d      	mov	r5, r1
 80058ac:	4614      	mov	r4, r2
 80058ae:	d50e      	bpl.n	80058ce <_svfiprintf_r+0x32>
 80058b0:	690b      	ldr	r3, [r1, #16]
 80058b2:	b963      	cbnz	r3, 80058ce <_svfiprintf_r+0x32>
 80058b4:	2140      	movs	r1, #64	; 0x40
 80058b6:	f7ff fe0d 	bl	80054d4 <_malloc_r>
 80058ba:	6028      	str	r0, [r5, #0]
 80058bc:	6128      	str	r0, [r5, #16]
 80058be:	b920      	cbnz	r0, 80058ca <_svfiprintf_r+0x2e>
 80058c0:	230c      	movs	r3, #12
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e0d1      	b.n	8005a6e <_svfiprintf_r+0x1d2>
 80058ca:	2340      	movs	r3, #64	; 0x40
 80058cc:	616b      	str	r3, [r5, #20]
 80058ce:	2300      	movs	r3, #0
 80058d0:	9309      	str	r3, [sp, #36]	; 0x24
 80058d2:	2320      	movs	r3, #32
 80058d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058dc:	2330      	movs	r3, #48	; 0x30
 80058de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a88 <_svfiprintf_r+0x1ec>
 80058e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e6:	f04f 0901 	mov.w	r9, #1
 80058ea:	4623      	mov	r3, r4
 80058ec:	469a      	mov	sl, r3
 80058ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f2:	b10a      	cbz	r2, 80058f8 <_svfiprintf_r+0x5c>
 80058f4:	2a25      	cmp	r2, #37	; 0x25
 80058f6:	d1f9      	bne.n	80058ec <_svfiprintf_r+0x50>
 80058f8:	ebba 0b04 	subs.w	fp, sl, r4
 80058fc:	d00b      	beq.n	8005916 <_svfiprintf_r+0x7a>
 80058fe:	465b      	mov	r3, fp
 8005900:	4622      	mov	r2, r4
 8005902:	4629      	mov	r1, r5
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff ff6d 	bl	80057e4 <__ssputs_r>
 800590a:	3001      	adds	r0, #1
 800590c:	f000 80aa 	beq.w	8005a64 <_svfiprintf_r+0x1c8>
 8005910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005912:	445a      	add	r2, fp
 8005914:	9209      	str	r2, [sp, #36]	; 0x24
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80a2 	beq.w	8005a64 <_svfiprintf_r+0x1c8>
 8005920:	2300      	movs	r3, #0
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800592a:	f10a 0a01 	add.w	sl, sl, #1
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	9307      	str	r3, [sp, #28]
 8005932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005936:	931a      	str	r3, [sp, #104]	; 0x68
 8005938:	4654      	mov	r4, sl
 800593a:	2205      	movs	r2, #5
 800593c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005940:	4851      	ldr	r0, [pc, #324]	; (8005a88 <_svfiprintf_r+0x1ec>)
 8005942:	f7fa fc5d 	bl	8000200 <memchr>
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	b9d8      	cbnz	r0, 8005982 <_svfiprintf_r+0xe6>
 800594a:	06d0      	lsls	r0, r2, #27
 800594c:	bf44      	itt	mi
 800594e:	2320      	movmi	r3, #32
 8005950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005954:	0711      	lsls	r1, r2, #28
 8005956:	bf44      	itt	mi
 8005958:	232b      	movmi	r3, #43	; 0x2b
 800595a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595e:	f89a 3000 	ldrb.w	r3, [sl]
 8005962:	2b2a      	cmp	r3, #42	; 0x2a
 8005964:	d015      	beq.n	8005992 <_svfiprintf_r+0xf6>
 8005966:	9a07      	ldr	r2, [sp, #28]
 8005968:	4654      	mov	r4, sl
 800596a:	2000      	movs	r0, #0
 800596c:	f04f 0c0a 	mov.w	ip, #10
 8005970:	4621      	mov	r1, r4
 8005972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005976:	3b30      	subs	r3, #48	; 0x30
 8005978:	2b09      	cmp	r3, #9
 800597a:	d94e      	bls.n	8005a1a <_svfiprintf_r+0x17e>
 800597c:	b1b0      	cbz	r0, 80059ac <_svfiprintf_r+0x110>
 800597e:	9207      	str	r2, [sp, #28]
 8005980:	e014      	b.n	80059ac <_svfiprintf_r+0x110>
 8005982:	eba0 0308 	sub.w	r3, r0, r8
 8005986:	fa09 f303 	lsl.w	r3, r9, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	46a2      	mov	sl, r4
 8005990:	e7d2      	b.n	8005938 <_svfiprintf_r+0x9c>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	1d19      	adds	r1, r3, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	9103      	str	r1, [sp, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfbb      	ittet	lt
 800599e:	425b      	neglt	r3, r3
 80059a0:	f042 0202 	orrlt.w	r2, r2, #2
 80059a4:	9307      	strge	r3, [sp, #28]
 80059a6:	9307      	strlt	r3, [sp, #28]
 80059a8:	bfb8      	it	lt
 80059aa:	9204      	strlt	r2, [sp, #16]
 80059ac:	7823      	ldrb	r3, [r4, #0]
 80059ae:	2b2e      	cmp	r3, #46	; 0x2e
 80059b0:	d10c      	bne.n	80059cc <_svfiprintf_r+0x130>
 80059b2:	7863      	ldrb	r3, [r4, #1]
 80059b4:	2b2a      	cmp	r3, #42	; 0x2a
 80059b6:	d135      	bne.n	8005a24 <_svfiprintf_r+0x188>
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfb8      	it	lt
 80059c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c8:	3402      	adds	r4, #2
 80059ca:	9305      	str	r3, [sp, #20]
 80059cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a98 <_svfiprintf_r+0x1fc>
 80059d0:	7821      	ldrb	r1, [r4, #0]
 80059d2:	2203      	movs	r2, #3
 80059d4:	4650      	mov	r0, sl
 80059d6:	f7fa fc13 	bl	8000200 <memchr>
 80059da:	b140      	cbz	r0, 80059ee <_svfiprintf_r+0x152>
 80059dc:	2340      	movs	r3, #64	; 0x40
 80059de:	eba0 000a 	sub.w	r0, r0, sl
 80059e2:	fa03 f000 	lsl.w	r0, r3, r0
 80059e6:	9b04      	ldr	r3, [sp, #16]
 80059e8:	4303      	orrs	r3, r0
 80059ea:	3401      	adds	r4, #1
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f2:	4826      	ldr	r0, [pc, #152]	; (8005a8c <_svfiprintf_r+0x1f0>)
 80059f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f8:	2206      	movs	r2, #6
 80059fa:	f7fa fc01 	bl	8000200 <memchr>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d038      	beq.n	8005a74 <_svfiprintf_r+0x1d8>
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <_svfiprintf_r+0x1f4>)
 8005a04:	bb1b      	cbnz	r3, 8005a4e <_svfiprintf_r+0x1b2>
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	3307      	adds	r3, #7
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	3308      	adds	r3, #8
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a14:	4433      	add	r3, r6
 8005a16:	9309      	str	r3, [sp, #36]	; 0x24
 8005a18:	e767      	b.n	80058ea <_svfiprintf_r+0x4e>
 8005a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a1e:	460c      	mov	r4, r1
 8005a20:	2001      	movs	r0, #1
 8005a22:	e7a5      	b.n	8005970 <_svfiprintf_r+0xd4>
 8005a24:	2300      	movs	r3, #0
 8005a26:	3401      	adds	r4, #1
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f04f 0c0a 	mov.w	ip, #10
 8005a30:	4620      	mov	r0, r4
 8005a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a36:	3a30      	subs	r2, #48	; 0x30
 8005a38:	2a09      	cmp	r2, #9
 8005a3a:	d903      	bls.n	8005a44 <_svfiprintf_r+0x1a8>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0c5      	beq.n	80059cc <_svfiprintf_r+0x130>
 8005a40:	9105      	str	r1, [sp, #20]
 8005a42:	e7c3      	b.n	80059cc <_svfiprintf_r+0x130>
 8005a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a48:	4604      	mov	r4, r0
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e7f0      	b.n	8005a30 <_svfiprintf_r+0x194>
 8005a4e:	ab03      	add	r3, sp, #12
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	462a      	mov	r2, r5
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <_svfiprintf_r+0x1f8>)
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f3af 8000 	nop.w
 8005a5e:	1c42      	adds	r2, r0, #1
 8005a60:	4606      	mov	r6, r0
 8005a62:	d1d6      	bne.n	8005a12 <_svfiprintf_r+0x176>
 8005a64:	89ab      	ldrh	r3, [r5, #12]
 8005a66:	065b      	lsls	r3, r3, #25
 8005a68:	f53f af2c 	bmi.w	80058c4 <_svfiprintf_r+0x28>
 8005a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6e:	b01d      	add	sp, #116	; 0x74
 8005a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a74:	ab03      	add	r3, sp, #12
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <_svfiprintf_r+0x1f8>)
 8005a7c:	a904      	add	r1, sp, #16
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f000 f87a 	bl	8005b78 <_printf_i>
 8005a84:	e7eb      	b.n	8005a5e <_svfiprintf_r+0x1c2>
 8005a86:	bf00      	nop
 8005a88:	08006141 	.word	0x08006141
 8005a8c:	0800614b 	.word	0x0800614b
 8005a90:	00000000 	.word	0x00000000
 8005a94:	080057e5 	.word	0x080057e5
 8005a98:	08006147 	.word	0x08006147

08005a9c <_printf_common>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	688a      	ldr	r2, [r1, #8]
 8005aa6:	690b      	ldr	r3, [r1, #16]
 8005aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bfb8      	it	lt
 8005ab0:	4613      	movlt	r3, r2
 8005ab2:	6033      	str	r3, [r6, #0]
 8005ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab8:	4607      	mov	r7, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_printf_common+0x26>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6033      	str	r3, [r6, #0]
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	0699      	lsls	r1, r3, #26
 8005ac6:	bf42      	ittt	mi
 8005ac8:	6833      	ldrmi	r3, [r6, #0]
 8005aca:	3302      	addmi	r3, #2
 8005acc:	6033      	strmi	r3, [r6, #0]
 8005ace:	6825      	ldr	r5, [r4, #0]
 8005ad0:	f015 0506 	ands.w	r5, r5, #6
 8005ad4:	d106      	bne.n	8005ae4 <_printf_common+0x48>
 8005ad6:	f104 0a19 	add.w	sl, r4, #25
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	6832      	ldr	r2, [r6, #0]
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	dc26      	bgt.n	8005b32 <_printf_common+0x96>
 8005ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae8:	1e13      	subs	r3, r2, #0
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	bf18      	it	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	0692      	lsls	r2, r2, #26
 8005af2:	d42b      	bmi.n	8005b4c <_printf_common+0xb0>
 8005af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d01e      	beq.n	8005b40 <_printf_common+0xa4>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	68e5      	ldr	r5, [r4, #12]
 8005b06:	6832      	ldr	r2, [r6, #0]
 8005b08:	f003 0306 	and.w	r3, r3, #6
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	bf08      	it	eq
 8005b10:	1aad      	subeq	r5, r5, r2
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	6922      	ldr	r2, [r4, #16]
 8005b16:	bf0c      	ite	eq
 8005b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b1c:	2500      	movne	r5, #0
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bfc4      	itt	gt
 8005b22:	1a9b      	subgt	r3, r3, r2
 8005b24:	18ed      	addgt	r5, r5, r3
 8005b26:	2600      	movs	r6, #0
 8005b28:	341a      	adds	r4, #26
 8005b2a:	42b5      	cmp	r5, r6
 8005b2c:	d11a      	bne.n	8005b64 <_printf_common+0xc8>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e008      	b.n	8005b44 <_printf_common+0xa8>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4652      	mov	r2, sl
 8005b36:	4649      	mov	r1, r9
 8005b38:	4638      	mov	r0, r7
 8005b3a:	47c0      	blx	r8
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d103      	bne.n	8005b48 <_printf_common+0xac>
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	3501      	adds	r5, #1
 8005b4a:	e7c6      	b.n	8005ada <_printf_common+0x3e>
 8005b4c:	18e1      	adds	r1, r4, r3
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b56:	4422      	add	r2, r4
 8005b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b60:	3302      	adds	r3, #2
 8005b62:	e7c7      	b.n	8005af4 <_printf_common+0x58>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4622      	mov	r2, r4
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c0      	blx	r8
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d0e6      	beq.n	8005b40 <_printf_common+0xa4>
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7d9      	b.n	8005b2a <_printf_common+0x8e>
	...

08005b78 <_printf_i>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	7e0f      	ldrb	r7, [r1, #24]
 8005b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b80:	2f78      	cmp	r7, #120	; 0x78
 8005b82:	4691      	mov	r9, r2
 8005b84:	4680      	mov	r8, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b8e:	d807      	bhi.n	8005ba0 <_printf_i+0x28>
 8005b90:	2f62      	cmp	r7, #98	; 0x62
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x32>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f000 80d8 	beq.w	8005d4a <_printf_i+0x1d2>
 8005b9a:	2f58      	cmp	r7, #88	; 0x58
 8005b9c:	f000 80a3 	beq.w	8005ce6 <_printf_i+0x16e>
 8005ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba8:	e03a      	b.n	8005c20 <_printf_i+0xa8>
 8005baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bae:	2b15      	cmp	r3, #21
 8005bb0:	d8f6      	bhi.n	8005ba0 <_printf_i+0x28>
 8005bb2:	a101      	add	r1, pc, #4	; (adr r1, 8005bb8 <_printf_i+0x40>)
 8005bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005ba1 	.word	0x08005ba1
 8005bc4:	08005ba1 	.word	0x08005ba1
 8005bc8:	08005ba1 	.word	0x08005ba1
 8005bcc:	08005ba1 	.word	0x08005ba1
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005ba1 	.word	0x08005ba1
 8005bd8:	08005ba1 	.word	0x08005ba1
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005d31 	.word	0x08005d31
 8005be8:	08005c55 	.word	0x08005c55
 8005bec:	08005d13 	.word	0x08005d13
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d53 	.word	0x08005d53
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005d1b 	.word	0x08005d1b
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0a3      	b.n	8005d6c <_printf_i+0x1f4>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	6829      	ldr	r1, [r5, #0]
 8005c28:	0606      	lsls	r6, r0, #24
 8005c2a:	f101 0304 	add.w	r3, r1, #4
 8005c2e:	d50a      	bpl.n	8005c46 <_printf_i+0xce>
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	da03      	bge.n	8005c40 <_printf_i+0xc8>
 8005c38:	232d      	movs	r3, #45	; 0x2d
 8005c3a:	4276      	negs	r6, r6
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	485e      	ldr	r0, [pc, #376]	; (8005dbc <_printf_i+0x244>)
 8005c42:	230a      	movs	r3, #10
 8005c44:	e019      	b.n	8005c7a <_printf_i+0x102>
 8005c46:	680e      	ldr	r6, [r1, #0]
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c4e:	bf18      	it	ne
 8005c50:	b236      	sxthne	r6, r6
 8005c52:	e7ef      	b.n	8005c34 <_printf_i+0xbc>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	6820      	ldr	r0, [r4, #0]
 8005c58:	1d19      	adds	r1, r3, #4
 8005c5a:	6029      	str	r1, [r5, #0]
 8005c5c:	0601      	lsls	r1, r0, #24
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0xec>
 8005c60:	681e      	ldr	r6, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <_printf_i+0xf2>
 8005c64:	0646      	lsls	r6, r0, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0xe8>
 8005c68:	881e      	ldrh	r6, [r3, #0]
 8005c6a:	4854      	ldr	r0, [pc, #336]	; (8005dbc <_printf_i+0x244>)
 8005c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c6e:	bf0c      	ite	eq
 8005c70:	2308      	moveq	r3, #8
 8005c72:	230a      	movne	r3, #10
 8005c74:	2100      	movs	r1, #0
 8005c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c7a:	6865      	ldr	r5, [r4, #4]
 8005c7c:	60a5      	str	r5, [r4, #8]
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	bfa2      	ittt	ge
 8005c82:	6821      	ldrge	r1, [r4, #0]
 8005c84:	f021 0104 	bicge.w	r1, r1, #4
 8005c88:	6021      	strge	r1, [r4, #0]
 8005c8a:	b90e      	cbnz	r6, 8005c90 <_printf_i+0x118>
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	d04d      	beq.n	8005d2c <_printf_i+0x1b4>
 8005c90:	4615      	mov	r5, r2
 8005c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c96:	fb03 6711 	mls	r7, r3, r1, r6
 8005c9a:	5dc7      	ldrb	r7, [r0, r7]
 8005c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	42bb      	cmp	r3, r7
 8005ca4:	460e      	mov	r6, r1
 8005ca6:	d9f4      	bls.n	8005c92 <_printf_i+0x11a>
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d10b      	bne.n	8005cc4 <_printf_i+0x14c>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	07de      	lsls	r6, r3, #31
 8005cb0:	d508      	bpl.n	8005cc4 <_printf_i+0x14c>
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6861      	ldr	r1, [r4, #4]
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	bfde      	ittt	le
 8005cba:	2330      	movle	r3, #48	; 0x30
 8005cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cc4:	1b52      	subs	r2, r2, r5
 8005cc6:	6122      	str	r2, [r4, #16]
 8005cc8:	f8cd a000 	str.w	sl, [sp]
 8005ccc:	464b      	mov	r3, r9
 8005cce:	aa03      	add	r2, sp, #12
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	f7ff fee2 	bl	8005a9c <_printf_common>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d14c      	bne.n	8005d76 <_printf_i+0x1fe>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	b004      	add	sp, #16
 8005ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce6:	4835      	ldr	r0, [pc, #212]	; (8005dbc <_printf_i+0x244>)
 8005ce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cec:	6829      	ldr	r1, [r5, #0]
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cf4:	6029      	str	r1, [r5, #0]
 8005cf6:	061d      	lsls	r5, r3, #24
 8005cf8:	d514      	bpl.n	8005d24 <_printf_i+0x1ac>
 8005cfa:	07df      	lsls	r7, r3, #31
 8005cfc:	bf44      	itt	mi
 8005cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8005d02:	6023      	strmi	r3, [r4, #0]
 8005d04:	b91e      	cbnz	r6, 8005d0e <_printf_i+0x196>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f023 0320 	bic.w	r3, r3, #32
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	2310      	movs	r3, #16
 8005d10:	e7b0      	b.n	8005c74 <_printf_i+0xfc>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f043 0320 	orr.w	r3, r3, #32
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	2378      	movs	r3, #120	; 0x78
 8005d1c:	4828      	ldr	r0, [pc, #160]	; (8005dc0 <_printf_i+0x248>)
 8005d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d22:	e7e3      	b.n	8005cec <_printf_i+0x174>
 8005d24:	0659      	lsls	r1, r3, #25
 8005d26:	bf48      	it	mi
 8005d28:	b2b6      	uxthmi	r6, r6
 8005d2a:	e7e6      	b.n	8005cfa <_printf_i+0x182>
 8005d2c:	4615      	mov	r5, r2
 8005d2e:	e7bb      	b.n	8005ca8 <_printf_i+0x130>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	6826      	ldr	r6, [r4, #0]
 8005d34:	6961      	ldr	r1, [r4, #20]
 8005d36:	1d18      	adds	r0, r3, #4
 8005d38:	6028      	str	r0, [r5, #0]
 8005d3a:	0635      	lsls	r5, r6, #24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0x1cc>
 8005d40:	6019      	str	r1, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0x1d2>
 8005d44:	0670      	lsls	r0, r6, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0x1c8>
 8005d48:	8019      	strh	r1, [r3, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	4615      	mov	r5, r2
 8005d50:	e7ba      	b.n	8005cc8 <_printf_i+0x150>
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	1d1a      	adds	r2, r3, #4
 8005d56:	602a      	str	r2, [r5, #0]
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	6862      	ldr	r2, [r4, #4]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7fa fa4e 	bl	8000200 <memchr>
 8005d64:	b108      	cbz	r0, 8005d6a <_printf_i+0x1f2>
 8005d66:	1b40      	subs	r0, r0, r5
 8005d68:	6060      	str	r0, [r4, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	e7a8      	b.n	8005cc8 <_printf_i+0x150>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	462a      	mov	r2, r5
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	47d0      	blx	sl
 8005d80:	3001      	adds	r0, #1
 8005d82:	d0ab      	beq.n	8005cdc <_printf_i+0x164>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	079b      	lsls	r3, r3, #30
 8005d88:	d413      	bmi.n	8005db2 <_printf_i+0x23a>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	bfb8      	it	lt
 8005d92:	4618      	movlt	r0, r3
 8005d94:	e7a4      	b.n	8005ce0 <_printf_i+0x168>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d09b      	beq.n	8005cdc <_printf_i+0x164>
 8005da4:	3501      	adds	r5, #1
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	9903      	ldr	r1, [sp, #12]
 8005daa:	1a5b      	subs	r3, r3, r1
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dcf2      	bgt.n	8005d96 <_printf_i+0x21e>
 8005db0:	e7eb      	b.n	8005d8a <_printf_i+0x212>
 8005db2:	2500      	movs	r5, #0
 8005db4:	f104 0619 	add.w	r6, r4, #25
 8005db8:	e7f5      	b.n	8005da6 <_printf_i+0x22e>
 8005dba:	bf00      	nop
 8005dbc:	08006152 	.word	0x08006152
 8005dc0:	08006163 	.word	0x08006163

08005dc4 <__retarget_lock_acquire_recursive>:
 8005dc4:	4770      	bx	lr

08005dc6 <__retarget_lock_release_recursive>:
 8005dc6:	4770      	bx	lr

08005dc8 <memmove>:
 8005dc8:	4288      	cmp	r0, r1
 8005dca:	b510      	push	{r4, lr}
 8005dcc:	eb01 0402 	add.w	r4, r1, r2
 8005dd0:	d902      	bls.n	8005dd8 <memmove+0x10>
 8005dd2:	4284      	cmp	r4, r0
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	d807      	bhi.n	8005de8 <memmove+0x20>
 8005dd8:	1e43      	subs	r3, r0, #1
 8005dda:	42a1      	cmp	r1, r4
 8005ddc:	d008      	beq.n	8005df0 <memmove+0x28>
 8005dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005de6:	e7f8      	b.n	8005dda <memmove+0x12>
 8005de8:	4402      	add	r2, r0
 8005dea:	4601      	mov	r1, r0
 8005dec:	428a      	cmp	r2, r1
 8005dee:	d100      	bne.n	8005df2 <memmove+0x2a>
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dfa:	e7f7      	b.n	8005dec <memmove+0x24>

08005dfc <_realloc_r>:
 8005dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e00:	4680      	mov	r8, r0
 8005e02:	4614      	mov	r4, r2
 8005e04:	460e      	mov	r6, r1
 8005e06:	b921      	cbnz	r1, 8005e12 <_realloc_r+0x16>
 8005e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	f7ff bb61 	b.w	80054d4 <_malloc_r>
 8005e12:	b92a      	cbnz	r2, 8005e20 <_realloc_r+0x24>
 8005e14:	f7ff faf2 	bl	80053fc <_free_r>
 8005e18:	4625      	mov	r5, r4
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e20:	f000 f81b 	bl	8005e5a <_malloc_usable_size_r>
 8005e24:	4284      	cmp	r4, r0
 8005e26:	4607      	mov	r7, r0
 8005e28:	d802      	bhi.n	8005e30 <_realloc_r+0x34>
 8005e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e2e:	d812      	bhi.n	8005e56 <_realloc_r+0x5a>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4640      	mov	r0, r8
 8005e34:	f7ff fb4e 	bl	80054d4 <_malloc_r>
 8005e38:	4605      	mov	r5, r0
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d0ed      	beq.n	8005e1a <_realloc_r+0x1e>
 8005e3e:	42bc      	cmp	r4, r7
 8005e40:	4622      	mov	r2, r4
 8005e42:	4631      	mov	r1, r6
 8005e44:	bf28      	it	cs
 8005e46:	463a      	movcs	r2, r7
 8005e48:	f7ff fac2 	bl	80053d0 <memcpy>
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f7ff fad4 	bl	80053fc <_free_r>
 8005e54:	e7e1      	b.n	8005e1a <_realloc_r+0x1e>
 8005e56:	4635      	mov	r5, r6
 8005e58:	e7df      	b.n	8005e1a <_realloc_r+0x1e>

08005e5a <_malloc_usable_size_r>:
 8005e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e5e:	1f18      	subs	r0, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bfbc      	itt	lt
 8005e64:	580b      	ldrlt	r3, [r1, r0]
 8005e66:	18c0      	addlt	r0, r0, r3
 8005e68:	4770      	bx	lr
	...

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
